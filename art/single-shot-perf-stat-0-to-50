To honour the JVM settings for this build a new JVM will be forked. Please consider using the daemon: https://docs.gradle.org/5.6.2/userguide/gradle_daemon.html.
Daemon will be stopped at the end of the build stopping after processing

> Configure project :
maxParallelForks for task testJUnit4=2
maxParallelForks for task test=2
Configuration(s) specified but the install task does not exist in project :.

> Task :clean

> Task :compileJava

> Task :processResources NO-SOURCE
> Task :classes
> Task :compileTestJava
> Task :processTestResources
> Task :testClasses
> Task :compileJmhJava
> Task :processJmhResources NO-SOURCE
> Task :jmhClasses

> Task :jmhRunBytecodeGenerator
Processing 56 classes from /home/rohansuri/adaptive-radix-tree/art/build/classes/java/jmh with "reflection" generator
Writing out Java source to /home/rohansuri/adaptive-radix-tree/art/build/jmh-generated-sources and resources to /home/rohansuri/adaptive-radix-tree/art/build/jmh-generated-resources

> Task :jmhCompileGeneratedClasses
> Task :jmhJar
Iteration   1: 
> Task :jmh
# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 0, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 0.00% complete, ETA 00:00:00
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

81143154.000 ns/op
Iteration   1: 72056700.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        271.442272      task-clock (msec)         #    0.239 CPUs utilized          
               270      context-switches          #    0.995 K/sec                  
                64      cpu-migrations            #    0.236 K/sec                  
             2,670      page-faults               #    0.010 M/sec                  
      75,88,57,998      cycles                    #    2.796 GHz                      (22.34%)
      50,28,73,465      stalled-cycles-frontend   #   66.27% frontend cycles idle     (32.11%)
      61,72,19,370      instructions              #    0.81  insn per cycle         
                                                  #    0.81  stalled cycles per insn  (42.19%)
      10,75,11,504      branches                  #  396.075 M/sec                    (48.00%)
         48,32,433      branch-misses             #    4.49% of all branches          (52.94%)
      20,66,16,881      L1-dcache-loads           #  761.182 M/sec                    (23.67%)
       1,06,93,386      L1-dcache-load-misses     #    5.18% of all L1-dcache hits    (15.77%)
         35,58,297      LLC-loads                 #   13.109 M/sec                    (14.58%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         62,23,802      L1-icache-load-misses                                         (18.35%)
      20,38,05,703      dTLB-loads                #  750.825 M/sec                    (11.01%)
          8,41,250      dTLB-load-misses          #    0.41% of all dTLB cache hits   (9.16%)
          5,05,810      iTLB-loads                #    1.863 M/sec                    (8.08%)
          1,49,309      iTLB-load-misses          #   29.52% of all iTLB cache hits   (11.05%)
   <not supported>      L1-dcache-prefetches                                        
         20,71,638      L1-dcache-prefetch-misses #    7.632 M/sec                    (14.01%)

       1.134041373 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 0, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 0.98% complete, ETA 00:02:02
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        162.514895      task-clock (msec)         #    0.146 CPUs utilized          
               209      context-switches          #    0.001 M/sec                  
                37      cpu-migrations            #    0.228 K/sec                  
               157      page-faults               #    0.966 K/sec                  
      42,48,75,400      cycles                    #    2.614 GHz                      (22.76%)
      29,67,66,899      stalled-cycles-frontend   #   69.85% frontend cycles idle     (32.28%)
      29,53,74,828      instructions              #    0.70  insn per cycle         
                                                  #    1.00  stalled cycles per insn  (43.65%)
       5,69,27,548      branches                  #  350.291 M/sec                    (50.35%)
         32,71,802      branch-misses             #    5.75% of all branches          (53.83%)
       9,22,91,677      L1-dcache-loads           #  567.897 M/sec                    (17.69%)
         67,70,625      L1-dcache-load-misses     #    7.34% of all L1-dcache hits    (12.37%)
         32,59,947      LLC-loads                 #   20.059 M/sec                    (9.28%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         21,83,615      L1-icache-load-misses                                         (14.15%)
      10,59,12,870      dTLB-loads                #  651.712 M/sec                    (9.75%)
         10,48,581      dTLB-load-misses          #    0.99% of all dTLB cache hits   (9.74%)
          5,03,586      iTLB-loads                #    3.099 M/sec                    (9.72%)
            89,842      iTLB-load-misses          #   17.84% of all iTLB cache hits   (14.54%)
   <not supported>      L1-dcache-prefetches                                        
         19,45,520      L1-dcache-prefetch-misses #   11.971 M/sec                    (19.17%)

       1.111056538 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 1, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 1.96% complete, ETA 00:02:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 108583358.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        271.853074      task-clock (msec)         #    0.240 CPUs utilized          
               299      context-switches          #    0.001 M/sec                  
                63      cpu-migrations            #    0.232 K/sec                  
             2,745      page-faults               #    0.010 M/sec                  
      76,00,11,517      cycles                    #    2.796 GHz                      (23.85%)
      48,10,64,436      stalled-cycles-frontend   #   63.30% frontend cycles idle     (32.50%)
      66,22,15,428      instructions              #    0.87  insn per cycle         
                                                  #    0.73  stalled cycles per insn  (41.90%)
      11,67,75,738      branches                  #  429.555 M/sec                    (45.66%)
         49,27,904      branch-misses             #    4.22% of all branches          (50.03%)
      23,58,62,308      L1-dcache-loads           #  867.609 M/sec                    (20.16%)
       1,04,81,342      L1-dcache-load-misses     #    4.44% of all L1-dcache hits    (15.84%)
         36,84,780      LLC-loads                 #   13.554 M/sec                    (15.38%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         77,01,892      L1-icache-load-misses                                         (19.83%)
      19,25,71,401      dTLB-loads                #  708.366 M/sec                    (11.93%)
          7,42,106      dTLB-load-misses          #    0.39% of all dTLB cache hits   (10.10%)
          3,63,619      iTLB-loads                #    1.338 M/sec                    (10.11%)
          1,43,587      iTLB-load-misses          #   39.49% of all iTLB cache hits   (14.04%)
   <not supported>      L1-dcache-prefetches                                        
         24,21,270      L1-dcache-prefetch-misses #    8.907 M/sec                    (16.99%)

       1.134036263 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 1, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 2.94% complete, ETA 00:02:08
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

114971400.000 ns/op
Iteration   1: 164751434.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        251.015161      task-clock (msec)         #    0.220 CPUs utilized          
               279      context-switches          #    0.001 M/sec                  
                46      cpu-migrations            #    0.183 K/sec                  
               285      page-faults               #    0.001 M/sec                  
      71,09,34,723      cycles                    #    2.832 GHz                      (31.11%)
      45,02,02,115      stalled-cycles-frontend   #   63.33% frontend cycles idle     (37.45%)
      67,43,99,758      instructions              #    0.95  insn per cycle         
                                                  #    0.67  stalled cycles per insn  (45.01%)
      11,84,67,026      branches                  #  471.952 M/sec                    (48.07%)
         39,95,711      branch-misses             #    3.37% of all branches          (51.21%)
      20,17,31,473      L1-dcache-loads           #  803.663 M/sec                    (20.20%)
         98,37,071      L1-dcache-load-misses     #    4.88% of all L1-dcache hits    (14.57%)
         46,36,150      LLC-loads                 #   18.470 M/sec                    (14.09%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         30,61,386      L1-icache-load-misses                                         (18.23%)
      22,83,86,213      dTLB-loads                #  909.850 M/sec                    (11.14%)
          7,04,930      dTLB-load-misses          #    0.31% of all dTLB cache hits   (9.47%)
            12,597      iTLB-loads                #    0.050 M/sec                    (9.38%)
            19,717      iTLB-load-misses          #  156.52% of all iTLB cache hits   (14.17%)
   <not supported>      L1-dcache-prefetches                                        
         26,79,233      L1-dcache-prefetch-misses #   10.674 M/sec                    (18.95%)

       1.140856636 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 2, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 3.92% complete, ETA 00:02:08
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        199.710702      task-clock (msec)         #    0.182 CPUs utilized          
               192      context-switches          #    0.961 K/sec                  
                42      cpu-migrations            #    0.210 K/sec                  
             2,102      page-faults               #    0.011 M/sec                  
      57,20,90,610      cycles                    #    2.865 GHz                      (25.77%)
      40,39,11,582      stalled-cycles-frontend   #   70.60% frontend cycles idle     (37.18%)
      42,83,06,516      instructions              #    0.75  insn per cycle         
                                                  #    0.94  stalled cycles per insn  (48.56%)
       7,01,25,352      branches                  #  351.135 M/sec                    (54.39%)
         33,00,777      branch-misses             #    4.71% of all branches          (58.00%)
      12,73,01,113      L1-dcache-loads           #  637.428 M/sec                    (20.58%)
         89,51,991      L1-dcache-load-misses     #    7.03% of all L1-dcache hits    (14.78%)
         45,94,271      LLC-loads                 #   23.005 M/sec                    (9.77%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         39,48,259      L1-icache-load-misses                                         (13.78%)
      12,54,28,109      dTLB-loads                #  628.049 M/sec                    (8.01%)
          4,46,401      dTLB-load-misses          #    0.36% of all dTLB cache hits   (8.02%)
          1,84,198      iTLB-loads                #    0.922 M/sec                    (8.02%)
            43,501      iTLB-load-misses          #   23.62% of all iTLB cache hits   (12.03%)
   <not supported>      L1-dcache-prefetches                                        
         16,41,161      L1-dcache-prefetch-misses #    8.218 M/sec                    (16.05%)

       1.097019051 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 2, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 4.90% complete, ETA 00:02:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 113228235.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        114.814464      task-clock (msec)         #    0.108 CPUs utilized          
               181      context-switches          #    0.002 M/sec                  
                45      cpu-migrations            #    0.392 K/sec                  
               150      page-faults               #    0.001 M/sec                  
      30,32,31,491      cycles                    #    2.641 GHz                      (15.33%)
      23,28,51,271      stalled-cycles-frontend   #   76.79% frontend cycles idle     (35.74%)
      19,57,73,125      instructions              #    0.65  insn per cycle         
                                                  #    1.19  stalled cycles per insn  (48.82%)
       3,68,27,925      branches                  #  320.760 M/sec                    (61.89%)
         20,39,402      branch-misses             #    5.54% of all branches          (68.02%)
       6,61,35,870      L1-dcache-loads           #  576.024 M/sec                    (13.62%)
         47,87,920      L1-dcache-load-misses     #    7.24% of all L1-dcache hits    (12.25%)
         15,93,309      LLC-loads                 #   13.877 M/sec                    (9.47%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         24,19,075      L1-icache-load-misses                                         (12.94%)
       9,64,32,519      dTLB-loads                #  839.899 M/sec                    (6.94%)
          2,34,365      dTLB-load-misses          #    0.24% of all dTLB cache hits   (6.97%)
          1,26,100      iTLB-loads                #    1.098 M/sec                    (6.97%)
            63,678      iTLB-load-misses          #   50.50% of all iTLB cache hits   (7.35%)
   <not supported>      L1-dcache-prefetches                                        
         10,10,997      L1-dcache-prefetch-misses #    8.805 M/sec                    (7.35%)

       1.062839517 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 3, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 5.88% complete, ETA 00:02:05
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

133361637.000 ns/op
Iteration   1: 120632460.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        271.539448      task-clock (msec)         #    0.238 CPUs utilized          
               277      context-switches          #    0.001 M/sec                  
                57      cpu-migrations            #    0.210 K/sec                  
             3,289      page-faults               #    0.012 M/sec                  
      74,00,14,997      cycles                    #    2.725 GHz                      (19.51%)
      45,85,76,456      stalled-cycles-frontend   #   61.97% frontend cycles idle     (28.17%)
      63,82,12,731      instructions              #    0.86  insn per cycle         
                                                  #    0.72  stalled cycles per insn  (39.04%)
      11,67,73,320      branches                  #  430.042 M/sec                    (45.31%)
         50,22,495      branch-misses             #    4.30% of all branches          (50.89%)
      23,04,69,926      L1-dcache-loads           #  848.753 M/sec                    (26.69%)
         95,94,330      L1-dcache-load-misses     #    4.16% of all L1-dcache hits    (19.35%)
         43,34,453      LLC-loads                 #   15.963 M/sec                    (14.23%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         52,83,907      L1-icache-load-misses                                         (20.26%)
      22,47,07,323      dTLB-loads                #  827.531 M/sec                    (11.07%)
          6,85,598      dTLB-load-misses          #    0.31% of all dTLB cache hits   (6.74%)
          2,55,215      iTLB-loads                #    0.940 M/sec                    (5.88%)
            64,858      iTLB-load-misses          #   25.41% of all iTLB cache hits   (8.83%)
   <not supported>      L1-dcache-prefetches                                        
         25,98,019      L1-dcache-prefetch-misses #    9.568 M/sec                    (11.78%)

       1.140912792 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 3, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 6.86% complete, ETA 00:02:05
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        186.131504      task-clock (msec)         #    0.168 CPUs utilized          
               184      context-switches          #    0.989 K/sec                  
                50      cpu-migrations            #    0.269 K/sec                  
               149      page-faults               #    0.801 K/sec                  
      51,25,94,834      cycles                    #    2.754 GHz                      (22.91%)
      34,04,20,149      stalled-cycles-frontend   #   66.41% frontend cycles idle     (30.47%)
      38,73,58,079      instructions              #    0.76  insn per cycle         
                                                  #    0.88  stalled cycles per insn  (41.83%)
       7,12,18,550      branches                  #  382.625 M/sec                    (47.71%)
         35,98,640      branch-misses             #    5.05% of all branches          (50.20%)
      15,54,83,751      L1-dcache-loads           #  835.344 M/sec                    (21.02%)
         79,36,891      L1-dcache-load-misses     #    5.10% of all L1-dcache hits    (16.40%)
         36,63,099      LLC-loads                 #   19.680 M/sec                    (16.18%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         34,64,721      L1-icache-load-misses                                         (18.34%)
      17,41,82,898      dTLB-loads                #  935.806 M/sec                    (8.59%)
         10,56,159      dTLB-load-misses          #    0.61% of all dTLB cache hits   (8.59%)
          2,33,326      iTLB-loads                #    1.254 M/sec                    (8.60%)
            89,980      iTLB-load-misses          #   38.56% of all iTLB cache hits   (12.44%)
   <not supported>      L1-dcache-prefetches                                        
         14,43,301      L1-dcache-prefetch-misses #    7.754 M/sec                    (18.54%)

       1.104976445 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 4, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 7.84% complete, ETA 00:02:03
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 150159810.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        305.528151      task-clock (msec)         #    0.266 CPUs utilized          
               255      context-switches          #    0.835 K/sec                  
                57      cpu-migrations            #    0.187 K/sec                  
             3,514      page-faults               #    0.012 M/sec                  
      84,28,62,914      cycles                    #    2.759 GHz                      (22.33%)
      50,33,63,759      stalled-cycles-frontend   #   59.72% frontend cycles idle     (32.17%)
      83,54,66,526      instructions              #    0.99  insn per cycle         
                                                  #    0.60  stalled cycles per insn  (43.72%)
      14,72,27,411      branches                  #  481.878 M/sec                    (49.04%)
         49,85,178      branch-misses             #    3.39% of all branches          (52.27%)
      24,73,71,853      L1-dcache-loads           #  809.653 M/sec                    (19.69%)
       1,07,50,532      L1-dcache-load-misses     #    4.35% of all L1-dcache hits    (10.99%)
         41,26,103      LLC-loads                 #   13.505 M/sec                    (10.61%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         49,47,985      L1-icache-load-misses                                         (16.74%)
      24,13,03,021      dTLB-loads                #  789.790 M/sec                    (14.41%)
          7,86,415      dTLB-load-misses          #    0.33% of all dTLB cache hits   (11.31%)
          4,67,584      iTLB-loads                #    1.530 M/sec                    (8.92%)
          2,35,547      iTLB-load-misses          #   50.38% of all iTLB cache hits   (12.85%)
   <not supported>      L1-dcache-prefetches                                        
         24,39,712      L1-dcache-prefetch-misses #    7.985 M/sec                    (16.78%)

       1.149715675 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 4, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 8.82% complete, ETA 00:02:02
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

179386614.000 ns/op
Iteration   1: 142337751.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        295.905346      task-clock (msec)         #    0.257 CPUs utilized          
               215      context-switches          #    0.727 K/sec                  
                44      cpu-migrations            #    0.149 K/sec                  
               143      page-faults               #    0.483 K/sec                  
      83,15,58,268      cycles                    #    2.810 GHz                      (27.02%)
      60,96,78,132      stalled-cycles-frontend   #   73.32% frontend cycles idle     (32.98%)
      51,52,32,682      instructions              #    0.62  insn per cycle         
                                                  #    1.18  stalled cycles per insn  (42.04%)
      10,00,06,801      branches                  #  337.969 M/sec                    (45.67%)
         48,46,446      branch-misses             #    4.85% of all branches          (48.61%)
      24,21,30,875      L1-dcache-loads           #  818.271 M/sec                    (17.94%)
       1,17,35,772      L1-dcache-load-misses     #    4.85% of all L1-dcache hits    (14.90%)
         48,60,147      LLC-loads                 #   16.425 M/sec                    (12.00%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         27,43,248      L1-icache-load-misses                                         (17.40%)
      16,03,99,926      dTLB-loads                #  542.065 M/sec                    (10.80%)
         19,65,940      dTLB-load-misses          #    1.23% of all dTLB cache hits   (12.17%)
          4,41,499      iTLB-loads                #    1.492 M/sec                    (10.80%)
          3,31,100      iTLB-load-misses          #   74.99% of all iTLB cache hits   (14.53%)
   <not supported>      L1-dcache-prefetches                                        
         18,79,864      L1-dcache-prefetch-misses #    6.353 M/sec                    (19.88%)

       1.153116564 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 5, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 9.80% complete, ETA 00:02:01
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        348.884216      task-clock (msec)         #    0.296 CPUs utilized          
               235      context-switches          #    0.674 K/sec                  
                65      cpu-migrations            #    0.186 K/sec                  
             4,125      page-faults               #    0.012 M/sec                  
      97,77,49,438      cycles                    #    2.803 GHz                      (23.57%)
      56,17,28,143      stalled-cycles-frontend   #   57.45% frontend cycles idle     (30.32%)
    1,03,89,43,365      instructions              #    1.06  insn per cycle         
                                                  #    0.54  stalled cycles per insn  (40.35%)
      17,33,59,217      branches                  #  496.896 M/sec                    (44.89%)
         62,88,178      branch-misses             #    3.63% of all branches          (48.49%)
      25,62,51,796      L1-dcache-loads           #  734.490 M/sec                    (21.38%)
       1,56,02,240      L1-dcache-load-misses     #    6.09% of all L1-dcache hits    (16.52%)
         61,49,543      LLC-loads                 #   17.626 M/sec                    (12.23%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         46,27,239      L1-icache-load-misses                                         (17.68%)
      33,68,76,638      dTLB-loads                #  965.583 M/sec                    (14.91%)
          8,54,071      dTLB-load-misses          #    0.25% of all dTLB cache hits   (11.08%)
          3,20,389      iTLB-loads                #    0.918 M/sec                    (9.96%)
            93,033      iTLB-load-misses          #   29.04% of all iTLB cache hits   (14.56%)
   <not supported>      L1-dcache-prefetches                                        
         34,78,397      L1-dcache-prefetch-misses #    9.970 M/sec                    (19.17%)

       1.178436551 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 5, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 10.78% complete, ETA 00:02:01
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 128286859.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

         83.254909      task-clock (msec)         #    0.080 CPUs utilized          
               217      context-switches          #    0.003 M/sec                  
                57      cpu-migrations            #    0.685 K/sec                  
               149      page-faults               #    0.002 M/sec                  
      21,62,76,526      cycles                    #    2.598 GHz                      (18.57%)
      16,56,66,359      stalled-cycles-frontend   #   76.60% frontend cycles idle     (42.86%)
      15,38,19,443      instructions              #    0.71  insn per cycle         
                                                  #    1.08  stalled cycles per insn  (69.11%)
       2,85,35,007      branches                  #  342.743 M/sec                    (81.46%)
         14,83,245      branch-misses             #    5.20% of all branches          (89.65%)
       3,76,29,919      L1-dcache-loads           #  451.984 M/sec                    (13.24%)
         39,81,133      L1-dcache-load-misses     #   10.58% of all L1-dcache hits    (9.81%)
         16,03,569      LLC-loads                 #   19.261 M/sec                    (5.27%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         14,07,768      L1-icache-load-misses                                         (0.49%)
     <not counted>      dTLB-loads                                                    (0.00%)
     <not counted>      dTLB-load-misses                                              (0.00%)
     <not counted>      iTLB-loads                                                    (0.00%)
     <not counted>      iTLB-load-misses                                              (0.00%)
   <not supported>      L1-dcache-prefetches                                        
     <not counted>      L1-dcache-prefetch-misses                                     (0.00%)

       1.040167666 seconds time elapsed

Some events weren't counted. Try disabling the NMI watchdog:
	echo 0 > /proc/sys/kernel/nmi_watchdog
	perf stat ...
	echo 1 > /proc/sys/kernel/nmi_watchdog


# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 6, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 11.76% complete, ETA 00:01:59
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

186419311.000 ns/op
Iteration   1: 139258777.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        335.655371      task-clock (msec)         #    0.286 CPUs utilized          
               269      context-switches          #    0.801 K/sec                  
                53      cpu-migrations            #    0.158 K/sec                  
             2,941      page-faults               #    0.009 M/sec                  
      95,39,47,260      cycles                    #    2.842 GHz                      (26.32%)
      58,24,32,278      stalled-cycles-frontend   #   61.05% frontend cycles idle     (33.87%)
      96,71,83,771      instructions              #    1.01  insn per cycle         
                                                  #    0.60  stalled cycles per insn  (42.44%)
      17,52,57,717      branches                  #  522.136 M/sec                    (45.11%)
         50,64,974      branch-misses             #    2.89% of all branches          (46.61%)
      29,88,11,554      L1-dcache-loads           #  890.233 M/sec                    (22.59%)
       1,30,15,995      L1-dcache-load-misses     #    4.36% of all L1-dcache hits    (22.49%)
         46,39,918      LLC-loads                 #   13.823 M/sec                    (19.51%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         56,71,992      L1-icache-load-misses                                         (22.15%)
      30,66,66,926      dTLB-loads                #  913.636 M/sec                    (12.49%)
          7,64,685      dTLB-load-misses          #    0.25% of all dTLB cache hits   (10.18%)
          4,64,351      iTLB-loads                #    1.383 M/sec                    (9.52%)
          1,82,905      iTLB-load-misses          #   39.39% of all iTLB cache hits   (14.29%)
   <not supported>      L1-dcache-prefetches                                        
         27,84,688      L1-dcache-prefetch-misses #    8.296 M/sec                    (19.06%)

       1.171871411 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 6, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 12.75% complete, ETA 00:01:58
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        134.661079      task-clock (msec)         #    0.125 CPUs utilized          
               201      context-switches          #    0.001 M/sec                  
                26      cpu-migrations            #    0.193 K/sec                  
               151      page-faults               #    0.001 M/sec                  
      36,46,31,833      cycles                    #    2.708 GHz                      (15.99%)
      26,01,61,974      stalled-cycles-frontend   #   71.35% frontend cycles idle     (26.52%)
      25,66,67,842      instructions              #    0.70  insn per cycle         
                                                  #    1.01  stalled cycles per insn  (38.00%)
       4,51,11,433      branches                  #  335.000 M/sec                    (41.73%)
         23,58,096      branch-misses             #    5.23% of all branches          (54.27%)
       7,51,72,760      L1-dcache-loads           #  558.237 M/sec                    (22.05%)
         75,01,276      L1-dcache-load-misses     #    9.98% of all L1-dcache hits    (16.71%)
         30,74,529      LLC-loads                 #   22.832 M/sec                    (15.40%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         16,28,052      L1-icache-load-misses                                         (21.28%)
      14,01,46,152      dTLB-loads                # 1040.732 M/sec                    (6.39%)
          2,06,455      dTLB-load-misses          #    0.15% of all dTLB cache hits   (5.94%)
          2,23,774      iTLB-loads                #    1.662 M/sec                    (5.84%)
          1,10,573      iTLB-load-misses          #   49.41% of all iTLB cache hits   (8.82%)
   <not supported>      L1-dcache-prefetches                                        
         11,61,589      L1-dcache-prefetch-misses #    8.626 M/sec                    (11.80%)

       1.074862865 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 7, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 13.73% complete, ETA 00:01:56
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

172340872.000 ns/op
Iteration   1: 145861894.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        260.047315      task-clock (msec)         #    0.229 CPUs utilized          
               235      context-switches          #    0.904 K/sec                  
                46      cpu-migrations            #    0.177 K/sec                  
             2,824      page-faults               #    0.011 M/sec                  
      72,46,17,938      cycles                    #    2.786 GHz                      (24.89%)
      44,83,94,963      stalled-cycles-frontend   #   61.88% frontend cycles idle     (32.35%)
      68,60,57,966      instructions              #    0.95  insn per cycle         
                                                  #    0.65  stalled cycles per insn  (42.26%)
      12,14,34,762      branches                  #  466.972 M/sec                    (47.82%)
         42,89,512      branch-misses             #    3.53% of all branches          (52.89%)
      23,98,36,261      L1-dcache-loads           #  922.279 M/sec                    (20.32%)
         92,99,230      L1-dcache-load-misses     #    3.88% of all L1-dcache hits    (14.68%)
         40,36,673      LLC-loads                 #   15.523 M/sec                    (13.37%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         54,92,138      L1-icache-load-misses                                         (16.90%)
      19,72,18,893      dTLB-loads                #  758.396 M/sec                    (10.48%)
          6,04,889      dTLB-load-misses          #    0.31% of all dTLB cache hits   (9.22%)
          4,46,029      iTLB-loads                #    1.715 M/sec                    (9.22%)
          1,26,246      iTLB-load-misses          #   28.30% of all iTLB cache hits   (12.30%)
   <not supported>      L1-dcache-prefetches                                        
         21,38,745      L1-dcache-prefetch-misses #    8.224 M/sec                    (16.51%)

       1.133173711 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 7, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 14.71% complete, ETA 00:01:55
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        269.458237      task-clock (msec)         #    0.235 CPUs utilized          
               198      context-switches          #    0.735 K/sec                  
                50      cpu-migrations            #    0.186 K/sec                  
               155      page-faults               #    0.575 K/sec                  
      73,96,56,808      cycles                    #    2.745 GHz                      (23.55%)
      51,99,76,506      stalled-cycles-frontend   #   70.30% frontend cycles idle     (31.08%)
      53,27,82,890      instructions              #    0.72  insn per cycle         
                                                  #    0.98  stalled cycles per insn  (40.70%)
       9,43,61,398      branches                  #  350.189 M/sec                    (44.95%)
         48,29,055      branch-misses             #    5.12% of all branches          (45.42%)
      14,42,63,276      L1-dcache-loads           #  535.383 M/sec                    (16.11%)
       1,32,04,846      L1-dcache-load-misses     #    9.15% of all L1-dcache hits    (13.81%)
         60,34,797      LLC-loads                 #   22.396 M/sec                    (14.64%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         14,07,711      L1-icache-load-misses                                         (20.64%)
      19,91,31,222      dTLB-loads                #  739.006 M/sec                    (11.93%)
         17,70,987      dTLB-load-misses          #    0.89% of all dTLB cache hits   (13.36%)
          2,50,784      iTLB-loads                #    0.931 M/sec                    (10.94%)
          1,22,432      iTLB-load-misses          #   48.82% of all iTLB cache hits   (15.39%)
   <not supported>      L1-dcache-prefetches                                        
         20,69,726      L1-dcache-prefetch-misses #    7.681 M/sec                    (19.83%)

       1.146761447 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 8, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 15.69% complete, ETA 00:01:54
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 166041156.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        485.095064      task-clock (msec)         #    0.396 CPUs utilized          
               355      context-switches          #    0.732 K/sec                  
                71      cpu-migrations            #    0.146 K/sec                  
             2,969      page-faults               #    0.006 M/sec                  
    1,37,57,05,844      cycles                    #    2.836 GHz                      (27.20%)
      84,29,75,885      stalled-cycles-frontend   #   61.28% frontend cycles idle     (32.97%)
    1,27,61,08,870      instructions              #    0.93  insn per cycle         
                                                  #    0.66  stalled cycles per insn  (40.56%)
      22,43,62,992      branches                  #  462.513 M/sec                    (41.12%)
         93,23,843      branch-misses             #    4.16% of all branches          (42.57%)
      40,66,54,411      L1-dcache-loads           #  838.298 M/sec                    (22.56%)
       1,97,85,278      L1-dcache-load-misses     #    4.87% of all L1-dcache hits    (15.29%)
         66,31,209      LLC-loads                 #   13.670 M/sec                    (14.18%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         84,95,165      L1-icache-load-misses                                         (18.36%)
      42,66,71,332      dTLB-loads                #  879.562 M/sec                    (14.74%)
         11,77,530      dTLB-load-misses          #    0.28% of all dTLB cache hits   (11.24%)
          6,26,747      iTLB-loads                #    1.292 M/sec                    (11.23%)
          2,24,832      iTLB-load-misses          #   35.87% of all iTLB cache hits   (16.92%)
   <not supported>      L1-dcache-prefetches                                        
         40,30,513      L1-dcache-prefetch-misses #    8.309 M/sec                    (22.81%)

       1.225463353 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 8, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 16.67% complete, ETA 00:01:53
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

148868488.000 ns/op
Iteration   1: 180817549.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        207.431242      task-clock (msec)         #    0.185 CPUs utilized          
               203      context-switches          #    0.979 K/sec                  
                37      cpu-migrations            #    0.178 K/sec                  
               141      page-faults               #    0.680 K/sec                  
      57,31,46,733      cycles                    #    2.763 GHz                      (24.63%)
      39,53,78,408      stalled-cycles-frontend   #   68.98% frontend cycles idle     (34.87%)
      35,26,08,670      instructions              #    0.62  insn per cycle         
                                                  #    1.12  stalled cycles per insn  (46.67%)
       7,02,06,224      branches                  #  338.455 M/sec                    (53.33%)
         34,40,480      branch-misses             #    4.90% of all branches          (58.86%)
      14,08,70,124      L1-dcache-loads           #  679.117 M/sec                    (19.48%)
         94,88,271      L1-dcache-load-misses     #    6.74% of all L1-dcache hits    (14.03%)
         40,33,512      LLC-loads                 #   19.445 M/sec                    (11.39%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
          4,91,673      L1-icache-load-misses                                         (15.21%)
      15,91,59,249      dTLB-loads                #  767.287 M/sec                    (7.70%)
         11,36,124      dTLB-load-misses          #    0.71% of all dTLB cache hits   (7.70%)
          2,70,345      iTLB-loads                #    1.303 M/sec                    (7.70%)
          1,41,791      iTLB-load-misses          #   52.45% of all iTLB cache hits   (11.56%)
   <not supported>      L1-dcache-prefetches                                        
         15,53,530      L1-dcache-prefetch-misses #    7.489 M/sec                    (13.49%)

       1.121691196 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 9, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 17.65% complete, ETA 00:01:51
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        475.212285      task-clock (msec)         #    0.389 CPUs utilized          
               304      context-switches          #    0.640 K/sec                  
                63      cpu-migrations            #    0.133 K/sec                  
             2,825      page-faults               #    0.006 M/sec                  
    1,34,84,20,115      cycles                    #    2.838 GHz                      (26.56%)
      84,11,72,781      stalled-cycles-frontend   #   62.38% frontend cycles idle     (31.53%)
    1,23,75,69,460      instructions              #    0.92  insn per cycle         
                                                  #    0.68  stalled cycles per insn  (40.80%)
      21,85,14,287      branches                  #  459.825 M/sec                    (42.93%)
         90,32,445      branch-misses             #    4.13% of all branches          (44.40%)
      44,03,04,884      L1-dcache-loads           #  926.544 M/sec                    (22.78%)
       1,65,01,543      L1-dcache-load-misses     #    3.75% of all L1-dcache hits    (17.62%)
         61,51,417      LLC-loads                 #   12.945 M/sec                    (17.44%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         84,21,588      L1-icache-load-misses                                         (21.05%)
      43,72,46,601      dTLB-loads                #  920.108 M/sec                    (15.06%)
          9,82,750      dTLB-load-misses          #    0.22% of all dTLB cache hits   (11.99%)
          4,44,970      iTLB-loads                #    0.936 M/sec                    (11.46%)
          1,82,239      iTLB-load-misses          #   40.96% of all iTLB cache hits   (17.36%)
   <not supported>      L1-dcache-prefetches                                        
         40,07,000      L1-dcache-prefetch-misses #    8.432 M/sec                    (21.96%)

       1.222410938 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 9, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 18.63% complete, ETA 00:01:50
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 136087512.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        165.372735      task-clock (msec)         #    0.151 CPUs utilized          
               203      context-switches          #    0.001 M/sec                  
                33      cpu-migrations            #    0.200 K/sec                  
               153      page-faults               #    0.925 K/sec                  
      44,02,55,477      cycles                    #    2.662 GHz                      (27.31%)
      27,84,79,826      stalled-cycles-frontend   #   63.25% frontend cycles idle     (32.87%)
      37,98,42,011      instructions              #    0.86  insn per cycle         
                                                  #    0.73  stalled cycles per insn  (41.95%)
       7,01,82,955      branches                  #  424.393 M/sec                    (49.10%)
         29,89,837      branch-misses             #    4.26% of all branches          (56.52%)
      10,13,73,197      L1-dcache-loads           #  612.998 M/sec                    (16.49%)
         74,33,293      L1-dcache-load-misses     #    7.33% of all L1-dcache hits    (10.51%)
         34,38,200      LLC-loads                 #   20.791 M/sec                    (9.63%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         16,37,002      L1-icache-load-misses                                         (14.46%)
      16,98,77,480      dTLB-loads                # 1027.240 M/sec                    (9.65%)
          9,59,444      dTLB-load-misses          #    0.56% of all dTLB cache hits   (9.60%)
          3,30,111      iTLB-loads                #    1.996 M/sec                    (9.59%)
            99,507      iTLB-load-misses          #   30.14% of all iTLB cache hits   (14.42%)
   <not supported>      L1-dcache-prefetches                                        
         13,42,965      L1-dcache-prefetch-misses #    8.121 M/sec                    (18.49%)

       1.091832509 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 10, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 19.61% complete, ETA 00:01:49
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

219674937.000 ns/op
Iteration   1: 145887609.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        462.015027      task-clock (msec)         #    0.373 CPUs utilized          
               255      context-switches          #    0.552 K/sec                  
                54      cpu-migrations            #    0.117 K/sec                  
             3,726      page-faults               #    0.008 M/sec                  
    1,31,99,94,755      cycles                    #    2.857 GHz                      (21.90%)
      90,31,86,709      stalled-cycles-frontend   #   68.42% frontend cycles idle     (29.27%)
    1,04,93,35,942      instructions              #    0.79  insn per cycle         
                                                  #    0.86  stalled cycles per insn  (39.69%)
      18,95,98,356      branches                  #  410.373 M/sec                    (44.44%)
         75,51,169      branch-misses             #    3.98% of all branches          (45.43%)
      35,18,61,051      L1-dcache-loads           #  761.579 M/sec                    (18.95%)
       1,57,04,194      L1-dcache-load-misses     #    4.46% of all L1-dcache hits    (13.10%)
         69,44,069      LLC-loads                 #   15.030 M/sec                    (12.44%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         69,30,189      L1-icache-load-misses                                         (15.42%)
      32,74,99,804      dTLB-loads                #  708.851 M/sec                    (12.02%)
          9,84,673      dTLB-load-misses          #    0.30% of all dTLB cache hits   (12.47%)
          3,38,547      iTLB-loads                #    0.733 M/sec                    (12.09%)
          1,34,695      iTLB-load-misses          #   39.79% of all iTLB cache hits   (13.73%)
   <not supported>      L1-dcache-prefetches                                        
         30,61,914      L1-dcache-prefetch-misses #    6.627 M/sec                    (16.33%)

       1.240120290 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 10, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 20.59% complete, ETA 00:01:48
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        152.995025      task-clock (msec)         #    0.139 CPUs utilized          
               212      context-switches          #    0.001 M/sec                  
                38      cpu-migrations            #    0.248 K/sec                  
               139      page-faults               #    0.909 K/sec                  
      41,32,15,264      cycles                    #    2.701 GHz                      (27.31%)
      27,55,24,497      stalled-cycles-frontend   #   66.68% frontend cycles idle     (36.82%)
      28,47,88,730      instructions              #    0.69  insn per cycle         
                                                  #    0.97  stalled cycles per insn  (47.43%)
       4,92,33,585      branches                  #  321.799 M/sec                    (52.23%)
         23,79,621      branch-misses             #    4.83% of all branches          (55.22%)
      10,10,63,599      L1-dcache-loads           #  660.568 M/sec                    (12.20%)
         65,27,578      L1-dcache-load-misses     #    6.46% of all L1-dcache hits    (10.41%)
         31,49,771      LLC-loads                 #   20.587 M/sec                    (10.42%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         17,30,256      L1-icache-load-misses                                         (16.15%)
       9,39,70,380      dTLB-loads                #  614.205 M/sec                    (8.11%)
          9,46,585      dTLB-load-misses          #    1.01% of all dTLB cache hits   (8.61%)
          2,62,229      iTLB-loads                #    1.714 M/sec                    (10.41%)
            50,623      iTLB-load-misses          #   19.30% of all iTLB cache hits   (15.62%)
   <not supported>      L1-dcache-prefetches                                        
         15,39,400      L1-dcache-prefetch-misses #   10.062 M/sec                    (18.33%)

       1.103086224 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 11, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 21.57% complete, ETA 00:01:47
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 209181170.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        463.861770      task-clock (msec)         #    0.378 CPUs utilized          
               284      context-switches          #    0.612 K/sec                  
                63      cpu-migrations            #    0.136 K/sec                  
             5,123      page-faults               #    0.011 M/sec                  
    1,32,06,24,742      cycles                    #    2.847 GHz                      (24.44%)
      77,73,81,939      stalled-cycles-frontend   #   58.86% frontend cycles idle     (29.53%)
    1,33,84,70,061      instructions              #    1.01  insn per cycle         
                                                  #    0.58  stalled cycles per insn  (40.01%)
      22,82,61,591      branches                  #  492.090 M/sec                    (43.15%)
         83,92,166      branch-misses             #    3.68% of all branches          (46.40%)
      40,48,24,082      L1-dcache-loads           #  872.726 M/sec                    (27.90%)
       1,59,66,133      L1-dcache-load-misses     #    3.94% of all L1-dcache hits    (20.87%)
         65,74,136      LLC-loads                 #   14.173 M/sec                    (18.70%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         74,42,575      L1-icache-load-misses                                         (17.98%)
      42,23,57,067      dTLB-loads                #  910.524 M/sec                    (15.08%)
         10,00,602      dTLB-load-misses          #    0.24% of all dTLB cache hits   (10.77%)
          4,83,605      iTLB-loads                #    1.043 M/sec                    (10.33%)
          1,57,123      iTLB-load-misses          #   32.49% of all iTLB cache hits   (15.51%)
   <not supported>      L1-dcache-prefetches                                        
         40,60,832      L1-dcache-prefetch-misses #    8.754 M/sec                    (20.68%)

       1.227831948 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 11, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 22.55% complete, ETA 00:01:46
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

132141524.000 ns/op
Iteration   1: 298487955.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        194.884593      task-clock (msec)         #    0.173 CPUs utilized          
               216      context-switches          #    0.001 M/sec                  
                53      cpu-migrations            #    0.272 K/sec                  
               141      page-faults               #    0.724 K/sec                  
      51,87,13,676      cycles                    #    2.662 GHz                      (26.69%)
      32,43,19,409      stalled-cycles-frontend   #   62.52% frontend cycles idle     (36.31%)
      45,68,89,483      instructions              #    0.88  insn per cycle         
                                                  #    0.71  stalled cycles per insn  (45.95%)
       8,20,90,979      branches                  #  421.229 M/sec                    (50.48%)
         34,14,977      branch-misses             #    4.16% of all branches          (52.33%)
      10,93,12,230      L1-dcache-loads           #  560.908 M/sec                    (18.21%)
         83,21,311      L1-dcache-load-misses     #    7.61% of all L1-dcache hits    (14.42%)
         41,39,414      LLC-loads                 #   21.240 M/sec                    (12.32%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         22,93,886      L1-icache-load-misses                                         (14.38%)
      14,99,84,883      dTLB-loads                #  769.609 M/sec                    (8.19%)
         11,42,780      dTLB-load-misses          #    0.76% of all dTLB cache hits   (8.20%)
          3,13,858      iTLB-loads                #    1.610 M/sec                    (8.20%)
            83,872      iTLB-load-misses          #   26.72% of all iTLB cache hits   (13.10%)
   <not supported>      L1-dcache-prefetches                                        
         17,55,092      L1-dcache-prefetch-misses #    9.006 M/sec                    (17.12%)

       1.123754107 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 12, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 23.53% complete, ETA 00:01:44
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        582.649597      task-clock (msec)         #    0.451 CPUs utilized          
               271      context-switches          #    0.465 K/sec                  
                52      cpu-migrations            #    0.089 K/sec                  
             4,617      page-faults               #    0.008 M/sec                  
    1,71,14,35,652      cycles                    #    2.937 GHz                      (24.77%)
    1,19,07,16,696      stalled-cycles-frontend   #   69.57% frontend cycles idle     (29.64%)
    1,33,26,59,474      instructions              #    0.78  insn per cycle         
                                                  #    0.89  stalled cycles per insn  (37.64%)
      23,68,85,000      branches                  #  406.565 M/sec                    (40.08%)
         80,82,212      branch-misses             #    3.41% of all branches          (42.58%)
      41,34,99,516      L1-dcache-loads           #  709.688 M/sec                    (21.00%)
       2,24,04,503      L1-dcache-load-misses     #    5.42% of all L1-dcache hits    (24.78%)
         78,41,181      LLC-loads                 #   13.458 M/sec                    (15.38%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
       1,05,59,063      L1-icache-load-misses                                         (19.24%)
      41,85,28,347      dTLB-loads                #  718.319 M/sec                    (16.23%)
         22,36,839      dTLB-load-misses          #    0.53% of all dTLB cache hits   (16.46%)
          6,27,209      iTLB-loads                #    1.076 M/sec                    (11.84%)
          2,48,530      iTLB-load-misses          #   39.62% of all iTLB cache hits   (14.58%)
   <not supported>      L1-dcache-prefetches                                        
         38,18,607      L1-dcache-prefetch-misses #    6.554 M/sec                    (20.08%)

       1.291829139 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 12, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 24.51% complete, ETA 00:01:43
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 129342478.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        223.300980      task-clock (msec)         #    0.197 CPUs utilized          
               209      context-switches          #    0.936 K/sec                  
                36      cpu-migrations            #    0.161 K/sec                  
               152      page-faults               #    0.681 K/sec                  
      58,02,93,189      cycles                    #    2.599 GHz                      (24.26%)
      37,23,55,548      stalled-cycles-frontend   #   64.17% frontend cycles idle     (34.50%)
      48,34,50,309      instructions              #    0.83  insn per cycle         
                                                  #    0.77  stalled cycles per insn  (45.69%)
       8,92,24,083      branches                  #  399.569 M/sec                    (51.55%)
         43,49,139      branch-misses             #    4.87% of all branches          (55.36%)
      19,49,34,175      L1-dcache-loads           #  872.966 M/sec                    (21.37%)
       1,06,35,152      L1-dcache-load-misses     #    5.46% of all L1-dcache hits    (14.30%)
         47,99,592      LLC-loads                 #   21.494 M/sec                    (13.76%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         18,33,178      L1-icache-load-misses                                         (18.99%)
      17,21,22,606      dTLB-loads                #  770.810 M/sec                    (12.07%)
         10,46,943      dTLB-load-misses          #    0.61% of all dTLB cache hits   (7.41%)
          3,18,818      iTLB-loads                #    1.428 M/sec                    (7.15%)
            68,328      iTLB-load-misses          #   21.43% of all iTLB cache hits   (10.73%)
   <not supported>      L1-dcache-prefetches                                        
         23,18,480      L1-dcache-prefetch-misses #   10.383 M/sec                    (14.32%)

       1.135272234 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 13, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 25.49% complete, ETA 00:01:42
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

230497115.000 ns/op
Iteration   1: 161465707.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        338.993580      task-clock (msec)         #    0.282 CPUs utilized          
               265      context-switches          #    0.782 K/sec                  
                64      cpu-migrations            #    0.189 K/sec                  
             3,675      page-faults               #    0.011 M/sec                  
      94,95,55,893      cycles                    #    2.801 GHz                      (25.46%)
      62,18,61,541      stalled-cycles-frontend   #   65.49% frontend cycles idle     (33.49%)
      85,43,32,946      instructions              #    0.90  insn per cycle         
                                                  #    0.73  stalled cycles per insn  (42.02%)
      15,15,49,107      branches                  #  447.056 M/sec                    (42.16%)
         49,76,368      branch-misses             #    3.28% of all branches          (45.47%)
      27,29,81,034      L1-dcache-loads           #  805.269 M/sec                    (24.50%)
       1,18,51,148      L1-dcache-load-misses     #    4.34% of all L1-dcache hits    (22.33%)
         52,48,580      LLC-loads                 #   15.483 M/sec                    (18.68%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         66,79,092      L1-icache-load-misses                                         (20.04%)
      28,00,70,710      dTLB-loads                #  826.183 M/sec                    (12.63%)
          8,12,226      dTLB-load-misses          #    0.29% of all dTLB cache hits   (11.92%)
          4,05,516      iTLB-loads                #    1.196 M/sec                    (9.42%)
          1,20,729      iTLB-load-misses          #   29.77% of all iTLB cache hits   (14.14%)
   <not supported>      L1-dcache-prefetches                                        
         31,00,788      L1-dcache-prefetch-misses #    9.147 M/sec                    (18.87%)

       1.200558248 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 13, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 26.47% complete, ETA 00:01:41
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        233.016485      task-clock (msec)         #    0.207 CPUs utilized          
               229      context-switches          #    0.983 K/sec                  
                47      cpu-migrations            #    0.202 K/sec                  
               148      page-faults               #    0.635 K/sec                  
      64,46,06,549      cycles                    #    2.766 GHz                      (21.46%)
      38,55,26,840      stalled-cycles-frontend   #   59.81% frontend cycles idle     (27.81%)
      56,75,64,434      instructions              #    0.88  insn per cycle         
                                                  #    0.68  stalled cycles per insn  (39.80%)
      10,60,02,181      branches                  #  454.913 M/sec                    (45.49%)
         46,91,535      branch-misses             #    4.43% of all branches          (52.07%)
      16,99,82,770      L1-dcache-loads           #  729.488 M/sec                    (25.32%)
         88,57,648      L1-dcache-load-misses     #    5.21% of all L1-dcache hits    (14.04%)
         38,91,419      LLC-loads                 #   16.700 M/sec                    (12.38%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         36,31,132      L1-icache-load-misses                                         (15.57%)
      17,88,52,721      dTLB-loads                #  767.554 M/sec                    (12.01%)
          8,33,312      dTLB-load-misses          #    0.47% of all dTLB cache hits   (10.29%)
          2,31,735      iTLB-loads                #    0.995 M/sec                    (10.29%)
            71,269      iTLB-load-misses          #   30.75% of all iTLB cache hits   (12.21%)
   <not supported>      L1-dcache-prefetches                                        
         20,20,370      L1-dcache-prefetch-misses #    8.671 M/sec                    (15.65%)

       1.123757483 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 14, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 27.45% complete, ETA 00:01:39
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 267161958.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        420.370342      task-clock (msec)         #    0.348 CPUs utilized          
               279      context-switches          #    0.664 K/sec                  
                49      cpu-migrations            #    0.117 K/sec                  
             3,869      page-faults               #    0.009 M/sec                  
    1,18,46,40,468      cycles                    #    2.818 GHz                      (24.79%)
      84,13,57,164      stalled-cycles-frontend   #   71.02% frontend cycles idle     (29.68%)
      92,41,05,200      instructions              #    0.78  insn per cycle         
                                                  #    0.91  stalled cycles per insn  (39.74%)
      16,38,23,047      branches                  #  389.711 M/sec                    (42.64%)
         65,80,033      branch-misses             #    4.02% of all branches          (45.32%)
      28,35,78,049      L1-dcache-loads           #  674.591 M/sec                    (21.66%)
       1,42,44,609      L1-dcache-load-misses     #    5.02% of all L1-dcache hits    (16.12%)
         60,17,210      LLC-loads                 #   14.314 M/sec                    (15.40%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         59,29,086      L1-icache-load-misses                                         (17.51%)
      31,53,14,604      dTLB-loads                #  750.088 M/sec                    (16.72%)
         13,66,359      dTLB-load-misses          #    0.43% of all dTLB cache hits   (14.53%)
          7,19,957      iTLB-loads                #    1.713 M/sec                    (11.19%)
          2,37,015      iTLB-load-misses          #   32.92% of all iTLB cache hits   (14.79%)
   <not supported>      L1-dcache-prefetches                                        
         30,12,612      L1-dcache-prefetch-misses #    7.167 M/sec                    (19.85%)

       1.207407265 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 14, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 28.43% complete, ETA 00:01:38
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

166493234.000 ns/op
Iteration   1: 203851783.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        356.020843      task-clock (msec)         #    0.297 CPUs utilized          
               231      context-switches          #    0.649 K/sec                  
                27      cpu-migrations            #    0.076 K/sec                  
               162      page-faults               #    0.455 K/sec                  
      99,39,14,778      cycles                    #    2.792 GHz                      (22.25%)
      72,10,26,685      stalled-cycles-frontend   #   72.54% frontend cycles idle     (27.12%)
      72,63,86,286      instructions              #    0.73  insn per cycle         
                                                  #    0.99  stalled cycles per insn  (36.03%)
      12,46,06,917      branches                  #  349.999 M/sec                    (40.04%)
         59,26,205      branch-misses             #    4.76% of all branches          (43.96%)
      24,87,43,224      L1-dcache-loads           #  698.676 M/sec                    (23.93%)
       1,43,92,691      L1-dcache-load-misses     #    5.79% of all L1-dcache hits    (17.78%)
         68,31,703      LLC-loads                 #   19.189 M/sec                    (14.55%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         50,21,458      L1-icache-load-misses                                         (20.95%)
      23,14,26,585      dTLB-loads                #  650.037 M/sec                    (16.10%)
         15,67,160      dTLB-load-misses          #    0.68% of all dTLB cache hits   (14.40%)
          2,57,895      iTLB-loads                #    0.724 M/sec                    (11.72%)
            92,414      iTLB-load-misses          #   35.83% of all iTLB cache hits   (16.56%)
   <not supported>      L1-dcache-prefetches                                        
         30,00,193      L1-dcache-prefetch-misses #    8.427 M/sec                    (19.94%)

       1.198326006 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 15, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 29.41% complete, ETA 00:01:37
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        481.355640      task-clock (msec)         #    0.386 CPUs utilized          
               334      context-switches          #    0.694 K/sec                  
                61      cpu-migrations            #    0.127 K/sec                  
             2,984      page-faults               #    0.006 M/sec                  
    1,31,41,10,462      cycles                    #    2.730 GHz                      (26.20%)
      82,21,70,949      stalled-cycles-frontend   #   62.56% frontend cycles idle     (31.20%)
    1,26,81,28,955      instructions              #    0.97  insn per cycle         
                                                  #    0.65  stalled cycles per insn  (39.26%)
      24,12,54,079      branches                  #  501.197 M/sec                    (40.43%)
         95,09,235      branch-misses             #    3.94% of all branches          (43.38%)
      47,14,04,695      L1-dcache-loads           #  979.327 M/sec                    (24.19%)
       1,66,56,670      L1-dcache-load-misses     #    3.53% of all L1-dcache hits    (15.97%)
         66,85,140      LLC-loads                 #   13.888 M/sec                    (13.22%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         62,81,857      L1-icache-load-misses                                         (17.19%)
      42,99,33,716      dTLB-loads                #  893.173 M/sec                    (15.80%)
         11,59,950      dTLB-load-misses          #    0.27% of all dTLB cache hits   (11.79%)
          8,30,499      iTLB-loads                #    1.725 M/sec                    (11.37%)
          3,59,635      iTLB-load-misses          #   43.30% of all iTLB cache hits   (17.12%)
   <not supported>      L1-dcache-prefetches                                        
         33,29,968      L1-dcache-prefetch-misses #    6.918 M/sec                    (22.81%)

       1.246557042 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 15, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 30.39% complete, ETA 00:01:36
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 149737661.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        393.588360      task-clock (msec)         #    0.329 CPUs utilized          
               246      context-switches          #    0.625 K/sec                  
                50      cpu-migrations            #    0.127 K/sec                  
               184      page-faults               #    0.467 K/sec                  
    1,10,34,03,515      cycles                    #    2.803 GHz                      (23.29%)
      62,47,03,598      stalled-cycles-frontend   #   56.62% frontend cycles idle     (28.61%)
    1,16,16,37,601      instructions              #    1.05  insn per cycle         
                                                  #    0.54  stalled cycles per insn  (38.46%)
      19,94,53,481      branches                  #  506.757 M/sec                    (40.31%)
         82,38,664      branch-misses             #    4.13% of all branches          (44.21%)
      36,15,49,809      L1-dcache-loads           #  918.599 M/sec                    (24.42%)
       1,60,37,440      L1-dcache-load-misses     #    4.44% of all L1-dcache hits    (14.01%)
         70,09,127      LLC-loads                 #   17.808 M/sec                    (14.38%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         61,81,904      L1-icache-load-misses                                         (20.47%)
      35,19,75,759      dTLB-loads                #  894.274 M/sec                    (16.24%)
         16,70,131      dTLB-load-misses          #    0.47% of all dTLB cache hits   (11.93%)
          4,88,229      iTLB-loads                #    1.240 M/sec                    (11.96%)
          2,04,903      iTLB-load-misses          #   41.97% of all iTLB cache hits   (17.04%)
   <not supported>      L1-dcache-prefetches                                        
         36,35,314      L1-dcache-prefetch-misses #    9.236 M/sec                    (21.11%)

       1.195770649 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 16, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 31.37% complete, ETA 00:01:34
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

205804970.000 ns/op
Iteration   1: 154166200.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        362.189069      task-clock (msec)         #    0.298 CPUs utilized          
               261      context-switches          #    0.721 K/sec                  
                39      cpu-migrations            #    0.108 K/sec                  
             3,560      page-faults               #    0.010 M/sec                  
      97,76,97,944      cycles                    #    2.699 GHz                      (27.84%)
      61,53,12,392      stalled-cycles-frontend   #   62.93% frontend cycles idle     (31.87%)
      94,58,86,703      instructions              #    0.97  insn per cycle         
                                                  #    0.65  stalled cycles per insn  (41.31%)
      17,92,90,945      branches                  #  495.020 M/sec                    (41.68%)
         62,03,536      branch-misses             #    3.46% of all branches          (42.93%)
      36,67,01,779      L1-dcache-loads           # 1012.460 M/sec                    (21.08%)
       1,32,11,538      L1-dcache-load-misses     #    3.60% of all L1-dcache hits    (13.69%)
         56,90,312      LLC-loads                 #   15.711 M/sec                    (13.07%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         43,49,036      L1-icache-load-misses                                         (18.03%)
      34,99,49,187      dTLB-loads                #  966.206 M/sec                    (15.10%)
         10,09,294      dTLB-load-misses          #    0.29% of all dTLB cache hits   (12.34%)
          5,64,391      iTLB-loads                #    1.558 M/sec                    (11.44%)
          2,24,947      iTLB-load-misses          #   39.86% of all iTLB cache hits   (16.99%)
   <not supported>      L1-dcache-prefetches                                        
         30,13,141      L1-dcache-prefetch-misses #    8.319 M/sec                    (21.41%)

       1.213893233 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 16, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 32.35% complete, ETA 00:01:33
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        322.717925      task-clock (msec)         #    0.272 CPUs utilized          
               253      context-switches          #    0.784 K/sec                  
                31      cpu-migrations            #    0.096 K/sec                  
               152      page-faults               #    0.471 K/sec                  
      88,57,57,870      cycles                    #    2.745 GHz                      (23.29%)
      49,66,87,624      stalled-cycles-frontend   #   56.07% frontend cycles idle     (29.56%)
      83,87,41,212      instructions              #    0.95  insn per cycle         
                                                  #    0.59  stalled cycles per insn  (40.79%)
      14,86,73,326      branches                  #  460.691 M/sec                    (44.95%)
         62,02,109      branch-misses             #    4.17% of all branches          (49.87%)
      27,21,72,297      L1-dcache-loads           #  843.375 M/sec                    (26.19%)
       1,27,99,665      L1-dcache-load-misses     #    4.70% of all L1-dcache hits    (14.26%)
         60,70,891      LLC-loads                 #   18.812 M/sec                    (12.87%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         44,24,278      L1-icache-load-misses                                         (17.82%)
      33,15,46,461      dTLB-loads                # 1027.357 M/sec                    (13.04%)
         12,98,721      dTLB-load-misses          #    0.39% of all dTLB cache hits   (9.90%)
          3,27,044      iTLB-loads                #    1.013 M/sec                    (9.90%)
            72,622      iTLB-load-misses          #   22.21% of all iTLB cache hits   (14.85%)
   <not supported>      L1-dcache-prefetches                                        
         32,04,322      L1-dcache-prefetch-misses #    9.929 M/sec                    (19.80%)

       1.185934098 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 17, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 33.33% complete, ETA 00:01:32
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 259597610.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        517.525592      task-clock (msec)         #    0.402 CPUs utilized          
               277      context-switches          #    0.535 K/sec                  
                54      cpu-migrations            #    0.104 K/sec                  
             3,591      page-faults               #    0.007 M/sec                  
    1,44,59,85,410      cycles                    #    2.794 GHz                      (26.87%)
      89,43,67,444      stalled-cycles-frontend   #   61.85% frontend cycles idle     (32.32%)
    1,35,79,29,401      instructions              #    0.94  insn per cycle         
                                                  #    0.66  stalled cycles per insn  (41.47%)
      24,15,54,550      branches                  #  466.749 M/sec                    (44.08%)
         81,91,835      branch-misses             #    3.39% of all branches          (46.13%)
      45,29,83,968      L1-dcache-loads           #  875.288 M/sec                    (20.98%)
       1,67,83,961      L1-dcache-load-misses     #    3.71% of all L1-dcache hits    (14.41%)
         80,50,002      LLC-loads                 #   15.555 M/sec                    (11.94%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         86,19,666      L1-icache-load-misses                                         (18.33%)
      41,75,06,184      dTLB-loads                #  806.735 M/sec                    (14.38%)
         13,63,659      dTLB-load-misses          #    0.33% of all dTLB cache hits   (10.99%)
          4,96,607      iTLB-loads                #    0.960 M/sec                    (10.82%)
          1,53,385      iTLB-load-misses          #   30.89% of all iTLB cache hits   (16.47%)
   <not supported>      L1-dcache-prefetches                                        
         43,15,855      L1-dcache-prefetch-misses #    8.339 M/sec                    (22.53%)

       1.286190994 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 17, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 34.31% complete, ETA 00:01:31
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

152036645.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        318.988378      task-clock (msec)         #    0.270 CPUs utilized          
               239      context-switches          #    0.749 K/sec                  
                38      cpu-migrations            #    0.119 K/sec                  
               188      page-faults               #    0.589 K/sec                  
      86,53,32,482      cycles                    #    2.713 GHz                      (25.62%)
      52,21,57,128      stalled-cycles-frontend   #   60.34% frontend cycles idle     (30.59%)
      80,37,02,048      instructions              #    0.93  insn per cycle         
                                                  #    0.65  stalled cycles per insn  (39.67%)
      14,73,04,494      branches                  #  461.786 M/sec                    (43.89%)
         63,41,477      branch-misses             #    4.31% of all branches          (47.11%)
      25,97,94,462      L1-dcache-loads           #  814.432 M/sec                    (24.35%)
       1,12,13,084      L1-dcache-load-misses     #    4.32% of all L1-dcache hits    (14.96%)
         54,83,493      LLC-loads                 #   17.190 M/sec                    (13.01%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         49,21,223      L1-icache-load-misses                                         (17.52%)
      30,81,01,652      dTLB-loads                #  965.871 M/sec                    (11.60%)
         13,70,809      dTLB-load-misses          #    0.44% of all dTLB cache hits   (10.01%)
          2,84,448      iTLB-loads                #    0.892 M/sec                    (10.01%)
            96,776      iTLB-load-misses          #   34.02% of all iTLB cache hits   (15.01%)
   <not supported>      L1-dcache-prefetches                                        
         27,84,726      L1-dcache-prefetch-misses #    8.730 M/sec                    (19.84%)

       1.181388646 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 18, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 35.29% complete, ETA 00:01:29
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

254117603.000 ns/op
Iteration   1: 151084258.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        415.994202      task-clock (msec)         #    0.339 CPUs utilized          
               269      context-switches          #    0.647 K/sec                  
                45      cpu-migrations            #    0.108 K/sec                  
             3,025      page-faults               #    0.007 M/sec                  
    1,15,87,51,461      cycles                    #    2.785 GHz                      (29.63%)
      70,08,90,589      stalled-cycles-frontend   #   60.49% frontend cycles idle     (33.80%)
    1,13,77,83,729      instructions              #    0.98  insn per cycle         
                                                  #    0.62  stalled cycles per insn  (43.62%)
      20,31,65,088      branches                  #  488.384 M/sec                    (45.51%)
         68,19,516      branch-misses             #    3.36% of all branches          (47.34%)
      38,08,11,753      L1-dcache-loads           #  915.426 M/sec                    (21.63%)
       1,62,64,663      L1-dcache-load-misses     #    4.27% of all L1-dcache hits    (11.58%)
         58,43,169      LLC-loads                 #   14.046 M/sec                    (12.27%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         42,15,491      L1-icache-load-misses                                         (17.58%)
      39,18,97,698      dTLB-loads                #  942.075 M/sec                    (14.91%)
         10,06,270      dTLB-load-misses          #    0.26% of all dTLB cache hits   (11.52%)
          5,59,944      iTLB-loads                #    1.346 M/sec                    (11.52%)
          1,56,780      iTLB-load-misses          #   28.00% of all iTLB cache hits   (17.29%)
   <not supported>      L1-dcache-prefetches                                        
         36,51,702      L1-dcache-prefetch-misses #    8.778 M/sec                    (23.47%)

       1.228516771 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 18, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 36.27% complete, ETA 00:01:28
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        178.259329      task-clock (msec)         #    0.159 CPUs utilized          
               214      context-switches          #    0.001 M/sec                  
                24      cpu-migrations            #    0.135 K/sec                  
               139      page-faults               #    0.780 K/sec                  
      47,87,99,031      cycles                    #    2.686 GHz                      (24.17%)
      29,96,95,349      stalled-cycles-frontend   #   62.59% frontend cycles idle     (30.39%)
      38,50,62,659      instructions              #    0.80  insn per cycle         
                                                  #    0.78  stalled cycles per insn  (43.51%)
       7,13,08,843      branches                  #  400.029 M/sec                    (50.09%)
         33,40,596      branch-misses             #    4.68% of all branches          (57.71%)
      12,07,64,990      L1-dcache-loads           #  677.468 M/sec                    (19.91%)
         78,96,534      L1-dcache-load-misses     #    6.54% of all L1-dcache hits    (9.83%)
         35,49,387      LLC-loads                 #   19.911 M/sec                    (8.93%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         20,56,619      L1-icache-load-misses                                         (13.42%)
      14,04,62,318      dTLB-loads                #  787.966 M/sec                    (8.03%)
         10,86,486      dTLB-load-misses          #    0.77% of all dTLB cache hits   (7.92%)
          3,21,421      iTLB-loads                #    1.803 M/sec                    (8.86%)
          1,05,262      iTLB-load-misses          #   32.75% of all iTLB cache hits   (13.34%)
   <not supported>      L1-dcache-prefetches                                        
         17,24,714      L1-dcache-prefetch-misses #    9.675 M/sec                    (17.74%)

       1.117795940 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 19, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 37.25% complete, ETA 00:01:27
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

309876352.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        460.053367      task-clock (msec)         #    0.378 CPUs utilized          
               280      context-switches          #    0.609 K/sec                  
                46      cpu-migrations            #    0.100 K/sec                  
             4,542      page-faults               #    0.010 M/sec                  
    1,30,26,40,975      cycles                    #    2.831 GHz                      (26.92%)
      78,85,49,562      stalled-cycles-frontend   #   60.53% frontend cycles idle     (33.24%)
    1,39,47,21,972      instructions              #    1.07  insn per cycle         
                                                  #    0.57  stalled cycles per insn  (43.12%)
      24,38,58,516      branches                  #  530.066 M/sec                    (45.03%)
         78,57,430      branch-misses             #    3.22% of all branches          (46.98%)
      42,89,26,210      L1-dcache-loads           #  932.340 M/sec                    (18.68%)
       1,57,48,689      L1-dcache-load-misses     #    3.67% of all L1-dcache hits    (15.84%)
         75,43,317      LLC-loads                 #   16.397 M/sec                    (12.55%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         68,54,828      L1-icache-load-misses                                         (17.77%)
      45,66,88,131      dTLB-loads                #  992.685 M/sec                    (14.52%)
         10,94,704      dTLB-load-misses          #    0.24% of all dTLB cache hits   (10.42%)
          4,85,939      iTLB-loads                #    1.056 M/sec                    (10.42%)
          2,18,239      iTLB-load-misses          #   44.91% of all iTLB cache hits   (16.37%)
   <not supported>      L1-dcache-prefetches                                        
         47,03,613      L1-dcache-prefetch-misses #   10.224 M/sec                    (21.00%)

       1.215544790 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 19, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 38.24% complete, ETA 00:01:26
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

161749013.000 ns/op
Iteration   1: 243088953.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        441.455920      task-clock (msec)         #    0.361 CPUs utilized          
               316      context-switches          #    0.716 K/sec                  
                74      cpu-migrations            #    0.168 K/sec                  
             1,484      page-faults               #    0.003 M/sec                  
    1,26,21,38,542      cycles                    #    2.859 GHz                      (23.26%)
      69,20,84,290      stalled-cycles-frontend   #   54.83% frontend cycles idle     (31.53%)
    1,31,33,46,805      instructions              #    1.04  insn per cycle         
                                                  #    0.53  stalled cycles per insn  (42.74%)
      22,71,54,849      branches                  #  514.558 M/sec                    (46.33%)
         73,54,620      branch-misses             #    3.24% of all branches          (50.16%)
      38,82,79,245      L1-dcache-loads           #  879.543 M/sec                    (26.18%)
       1,59,97,395      L1-dcache-load-misses     #    4.12% of all L1-dcache hits    (20.25%)
         68,25,939      LLC-loads                 #   15.462 M/sec                    (17.07%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         49,26,868      L1-icache-load-misses                                         (20.41%)
      39,13,18,827      dTLB-loads                #  886.428 M/sec                    (15.76%)
         20,15,534      dTLB-load-misses          #    0.52% of all dTLB cache hits   (9.85%)
          5,70,368      iTLB-loads                #    1.292 M/sec                    (9.07%)
          1,49,825      iTLB-load-misses          #   26.27% of all iTLB cache hits   (13.61%)
   <not supported>      L1-dcache-prefetches                                        
         45,62,339      L1-dcache-prefetch-misses #   10.335 M/sec                    (18.15%)

       1.224462406 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 20, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 39.22% complete, ETA 00:01:24
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        339.347742      task-clock (msec)         #    0.283 CPUs utilized          
               258      context-switches          #    0.760 K/sec                  
                32      cpu-migrations            #    0.094 K/sec                  
             1,970      page-faults               #    0.006 M/sec                  
      95,67,52,071      cycles                    #    2.819 GHz                      (23.38%)
      56,37,80,500      stalled-cycles-frontend   #   58.93% frontend cycles idle     (31.23%)
      97,47,61,889      instructions              #    1.02  insn per cycle         
                                                  #    0.58  stalled cycles per insn  (41.75%)
      16,97,93,975      branches                  #  500.354 M/sec                    (45.90%)
         54,11,983      branch-misses             #    3.19% of all branches          (48.63%)
      32,55,52,547      L1-dcache-loads           #  959.348 M/sec                    (19.92%)
       1,11,90,701      L1-dcache-load-misses     #    3.44% of all L1-dcache hits    (14.68%)
         51,32,119      LLC-loads                 #   15.123 M/sec                    (12.29%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         49,05,478      L1-icache-load-misses                                         (19.28%)
      28,47,25,336      dTLB-loads                #  839.037 M/sec                    (15.30%)
          6,72,878      dTLB-load-misses          #    0.24% of all dTLB cache hits   (9.57%)
          4,67,184      iTLB-loads                #    1.377 M/sec                    (9.37%)
          1,14,046      iTLB-load-misses          #   24.41% of all iTLB cache hits   (12.91%)
   <not supported>      L1-dcache-prefetches                                        
         31,93,542      L1-dcache-prefetch-misses #    9.411 M/sec                    (17.62%)

       1.200194392 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 20, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 40.20% complete, ETA 00:01:23
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 205178496.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        366.158275      task-clock (msec)         #    0.304 CPUs utilized          
               208      context-switches          #    0.568 K/sec                  
                43      cpu-migrations            #    0.117 K/sec                  
               157      page-faults               #    0.429 K/sec                  
    1,05,98,76,657      cycles                    #    2.895 GHz                      (25.62%)
      72,93,99,212      stalled-cycles-frontend   #   68.82% frontend cycles idle     (31.13%)
      81,44,17,945      instructions              #    0.77  insn per cycle         
                                                  #    0.90  stalled cycles per insn  (40.18%)
      14,45,84,075      branches                  #  394.868 M/sec                    (42.57%)
         56,23,428      branch-misses             #    3.89% of all branches          (46.48%)
      27,10,43,933      L1-dcache-loads           #  740.237 M/sec                    (23.00%)
       1,44,01,380      L1-dcache-load-misses     #    5.31% of all L1-dcache hits    (15.29%)
         66,15,779      LLC-loads                 #   18.068 M/sec                    (14.18%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         27,93,812      L1-icache-load-misses                                         (20.71%)
      26,23,46,547      dTLB-loads                #  716.484 M/sec                    (15.46%)
         18,52,425      dTLB-load-misses          #    0.71% of all dTLB cache hits   (11.17%)
          3,95,638      iTLB-loads                #    1.081 M/sec                    (10.92%)
          1,22,083      iTLB-load-misses          #   30.86% of all iTLB cache hits   (16.37%)
   <not supported>      L1-dcache-prefetches                                        
         30,82,767      L1-dcache-prefetch-misses #    8.419 M/sec                    (20.40%)

       1.202495252 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 21, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 41.18% complete, ETA 00:01:22
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

305763162.000 ns/op
Iteration   1: 158847873.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        563.022643      task-clock (msec)         #    0.427 CPUs utilized          
               294      context-switches          #    0.522 K/sec                  
                53      cpu-migrations            #    0.094 K/sec                  
             3,073      page-faults               #    0.005 M/sec                  
    1,63,94,95,101      cycles                    #    2.912 GHz                      (24.72%)
    1,08,27,79,092      stalled-cycles-frontend   #   66.04% frontend cycles idle     (29.09%)
    1,43,00,66,240      instructions              #    0.87  insn per cycle         
                                                  #    0.76  stalled cycles per insn  (37.94%)
      25,12,09,253      branches                  #  446.180 M/sec                    (41.59%)
         81,98,958      branch-misses             #    3.26% of all branches          (44.47%)
      45,67,64,531      L1-dcache-loads           #  811.272 M/sec                    (19.34%)
       1,84,49,052      L1-dcache-load-misses     #    4.04% of all L1-dcache hits    (16.93%)
         75,21,164      LLC-loads                 #   13.359 M/sec                    (13.29%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         78,02,510      L1-icache-load-misses                                         (19.52%)
      41,05,50,273      dTLB-loads                #  729.190 M/sec                    (13.98%)
         15,02,864      dTLB-load-misses          #    0.37% of all dTLB cache hits   (13.89%)
          7,44,411      iTLB-loads                #    1.322 M/sec                    (11.58%)
          3,09,420      iTLB-load-misses          #   41.57% of all iTLB cache hits   (16.97%)
   <not supported>      L1-dcache-prefetches                                        
         43,48,013      L1-dcache-prefetch-misses #    7.723 M/sec                    (21.23%)

       1.317436100 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 21, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 42.16% complete, ETA 00:01:20
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        189.798791      task-clock (msec)         #    0.169 CPUs utilized          
               196      context-switches          #    0.001 M/sec                  
                29      cpu-migrations            #    0.153 K/sec                  
               142      page-faults               #    0.748 K/sec                  
      50,54,54,153      cycles                    #    2.663 GHz                      (23.86%)
      32,05,26,348      stalled-cycles-frontend   #   63.41% frontend cycles idle     (35.71%)
      41,02,53,797      instructions              #    0.81  insn per cycle         
                                                  #    0.78  stalled cycles per insn  (47.63%)
       7,76,62,565      branches                  #  409.184 M/sec                    (53.51%)
         36,84,241      branch-misses             #    4.74% of all branches          (56.81%)
      15,98,82,558      L1-dcache-loads           #  842.379 M/sec                    (17.74%)
         95,84,321      L1-dcache-load-misses     #    5.99% of all L1-dcache hits    (12.15%)
         39,48,076      LLC-loads                 #   20.801 M/sec                    (11.65%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         31,98,165      L1-icache-load-misses                                         (15.86%)
      17,20,85,762      dTLB-loads                #  906.675 M/sec                    (8.41%)
         10,30,006      dTLB-load-misses          #    0.60% of all dTLB cache hits   (8.42%)
          2,97,418      iTLB-loads                #    1.567 M/sec                    (8.39%)
          1,24,487      iTLB-load-misses          #   41.86% of all iTLB cache hits   (12.57%)
   <not supported>      L1-dcache-prefetches                                        
         19,69,763      L1-dcache-prefetch-misses #   10.378 M/sec                    (16.79%)

       1.125551492 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 22, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 43.14% complete, ETA 00:01:19
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 267223254.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        499.593616      task-clock (msec)         #    0.396 CPUs utilized          
               343      context-switches          #    0.687 K/sec                  
                84      cpu-migrations            #    0.168 K/sec                  
             4,326      page-faults               #    0.009 M/sec                  
    1,41,68,18,550      cycles                    #    2.836 GHz                      (23.48%)
      80,36,85,089      stalled-cycles-frontend   #   56.72% frontend cycles idle     (27.84%)
    1,54,95,10,260      instructions              #    1.09  insn per cycle         
                                                  #    0.52  stalled cycles per insn  (37.21%)
      27,51,03,075      branches                  #  550.654 M/sec                    (42.08%)
         89,08,170      branch-misses             #    3.24% of all branches          (46.11%)
      50,60,11,869      L1-dcache-loads           # 1012.847 M/sec                    (27.03%)
       2,02,64,383      L1-dcache-load-misses     #    4.00% of all L1-dcache hits    (14.19%)
         76,34,907      LLC-loads                 #   15.282 M/sec                    (13.17%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         43,52,052      L1-icache-load-misses                                         (19.06%)
      53,39,20,472      dTLB-loads                # 1068.710 M/sec                    (15.72%)
         11,10,759      dTLB-load-misses          #    0.21% of all dTLB cache hits   (11.82%)
          7,50,814      iTLB-loads                #    1.503 M/sec                    (10.46%)
          2,25,335      iTLB-load-misses          #   30.01% of all iTLB cache hits   (14.47%)
   <not supported>      L1-dcache-prefetches                                        
         47,01,152      L1-dcache-prefetch-misses #    9.410 M/sec                    (19.27%)

       1.260708010 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 22, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 44.12% complete, ETA 00:01:18
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

183332419.000 ns/op
Iteration   1: 250649079.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        325.151792      task-clock (msec)         #    0.274 CPUs utilized          
               228      context-switches          #    0.701 K/sec                  
                30      cpu-migrations            #    0.092 K/sec                  
               159      page-faults               #    0.489 K/sec                  
      88,62,63,834      cycles                    #    2.726 GHz                      (25.87%)
      48,16,31,733      stalled-cycles-frontend   #   54.34% frontend cycles idle     (32.62%)
      84,96,49,471      instructions              #    0.96  insn per cycle         
                                                  #    0.57  stalled cycles per insn  (43.10%)
      15,63,79,655      branches                  #  480.944 M/sec                    (46.60%)
         59,67,768      branch-misses             #    3.82% of all branches          (50.10%)
      28,51,65,390      L1-dcache-loads           #  877.022 M/sec                    (26.17%)
       1,50,51,123      L1-dcache-load-misses     #    5.28% of all L1-dcache hits    (14.51%)
         57,79,218      LLC-loads                 #   17.774 M/sec                    (13.43%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         34,39,506      L1-icache-load-misses                                         (17.84%)
      36,56,96,135      dTLB-loads                # 1124.694 M/sec                    (12.44%)
         13,57,522      dTLB-load-misses          #    0.37% of all dTLB cache hits   (9.82%)
          4,74,899      iTLB-loads                #    1.461 M/sec                    (9.82%)
          1,42,832      iTLB-load-misses          #   30.08% of all iTLB cache hits   (14.74%)
   <not supported>      L1-dcache-prefetches                                        
         31,06,973      L1-dcache-prefetch-misses #    9.555 M/sec                    (19.66%)

       1.184763775 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 23, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 45.10% complete, ETA 00:01:16
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        442.860000      task-clock (msec)         #    0.355 CPUs utilized          
               261      context-switches          #    0.589 K/sec                  
                42      cpu-migrations            #    0.095 K/sec                  
             4,480      page-faults               #    0.010 M/sec                  
    1,25,53,11,753      cycles                    #    2.835 GHz                      (26.26%)
      70,99,05,632      stalled-cycles-frontend   #   56.55% frontend cycles idle     (30.27%)
    1,37,63,66,186      instructions              #    1.10  insn per cycle         
                                                  #    0.52  stalled cycles per insn  (38.48%)
      24,54,75,566      branches                  #  554.296 M/sec                    (39.93%)
         76,48,159      branch-misses             #    3.12% of all branches          (44.18%)
      44,20,89,388      L1-dcache-loads           #  998.260 M/sec                    (26.63%)
       1,51,53,333      L1-dcache-load-misses     #    3.43% of all L1-dcache hits    (21.89%)
         68,25,983      LLC-loads                 #   15.413 M/sec                    (19.58%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         61,61,651      L1-icache-load-misses                                         (22.65%)
      42,90,54,264      dTLB-loads                #  968.826 M/sec                    (18.62%)
         12,01,717      dTLB-load-misses          #    0.28% of all dTLB cache hits   (16.06%)
          5,70,328      iTLB-loads                #    1.288 M/sec                    (10.81%)
          1,51,793      iTLB-load-misses          #   26.62% of all iTLB cache hits   (15.31%)
   <not supported>      L1-dcache-prefetches                                        
         43,96,537      L1-dcache-prefetch-misses #    9.928 M/sec                    (20.65%)

       1.247771634 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 23, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 46.08% complete, ETA 00:01:15
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 165138839.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        298.613683      task-clock (msec)         #    0.253 CPUs utilized          
               220      context-switches          #    0.737 K/sec                  
                41      cpu-migrations            #    0.137 K/sec                  
               151      page-faults               #    0.506 K/sec                  
      82,48,85,095      cycles                    #    2.762 GHz                      (24.82%)
      44,72,06,976      stalled-cycles-frontend   #   54.21% frontend cycles idle     (28.87%)
      83,21,17,704      instructions              #    1.01  insn per cycle         
                                                  #    0.54  stalled cycles per insn  (39.52%)
      15,74,98,360      branches                  #  527.432 M/sec                    (42.04%)
         57,65,885      branch-misses             #    3.66% of all branches          (45.80%)
      29,32,98,916      L1-dcache-loads           #  982.202 M/sec                    (24.87%)
       1,33,16,328      L1-dcache-load-misses     #    4.54% of all L1-dcache hits    (14.75%)
         60,08,420      LLC-loads                 #   20.121 M/sec                    (12.01%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         26,32,359      L1-icache-load-misses                                         (17.38%)
      33,64,71,576      dTLB-loads                # 1126.779 M/sec                    (13.65%)
         12,89,814      dTLB-load-misses          #    0.38% of all dTLB cache hits   (11.00%)
          4,96,261      iTLB-loads                #    1.662 M/sec                    (11.01%)
          1,31,362      iTLB-load-misses          #   26.47% of all iTLB cache hits   (15.51%)
   <not supported>      L1-dcache-prefetches                                        
         29,33,379      L1-dcache-prefetch-misses #    9.823 M/sec                    (20.53%)

       1.181182629 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 24, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 47.06% complete, ETA 00:01:14
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

326638259.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

       1028.016402      task-clock (msec)         #    0.679 CPUs utilized          
               462      context-switches          #    0.449 K/sec                  
                84      cpu-migrations            #    0.082 K/sec                  
             8,648      page-faults               #    0.008 M/sec                  
    2,98,28,34,859      cycles                    #    2.902 GHz                      (26.71%)
    1,83,63,69,638      stalled-cycles-frontend   #   61.56% frontend cycles idle     (29.69%)
    2,90,23,89,391      instructions              #    0.97  insn per cycle         
                                                  #    0.63  stalled cycles per insn  (37.23%)
      50,58,20,571      branches                  #  492.036 M/sec                    (40.36%)
       1,65,38,560      branch-misses             #    3.27% of all branches          (41.25%)
      95,06,80,351      L1-dcache-loads           #  924.772 M/sec                    (21.76%)
       3,79,86,172      L1-dcache-load-misses     #    4.00% of all L1-dcache hits    (23.26%)
       1,40,06,548      LLC-loads                 #   13.625 M/sec                    (18.15%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
       1,51,42,264      L1-icache-load-misses                                         (22.40%)
    1,04,80,16,907      dTLB-loads                # 1019.455 M/sec                    (14.63%)
         25,32,364      dTLB-load-misses          #    0.24% of all dTLB cache hits   (13.83%)
         11,78,232      iTLB-loads                #    1.146 M/sec                    (12.20%)
          4,61,205      iTLB-load-misses          #   39.14% of all iTLB cache hits   (17.35%)
   <not supported>      L1-dcache-prefetches                                        
         81,22,338      L1-dcache-prefetch-misses #    7.901 M/sec                    (23.11%)

       1.512944090 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 24, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 48.04% complete, ETA 00:01:13
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

210402151.000 ns/op
Iteration   1: 333850083.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        432.065807      task-clock (msec)         #    0.354 CPUs utilized          
               276      context-switches          #    0.639 K/sec                  
                48      cpu-migrations            #    0.111 K/sec                  
               187      page-faults               #    0.433 K/sec                  
    1,21,54,36,410      cycles                    #    2.813 GHz                      (24.08%)
      67,42,48,124      stalled-cycles-frontend   #   55.47% frontend cycles idle     (30.11%)
    1,23,81,94,335      instructions              #    1.02  insn per cycle         
                                                  #    0.54  stalled cycles per insn  (38.66%)
      21,90,74,828      branches                  #  507.040 M/sec                    (41.29%)
         81,54,618      branch-misses             #    3.72% of all branches          (43.84%)
      36,86,10,914      L1-dcache-loads           #  853.136 M/sec                    (21.85%)
       1,74,82,645      L1-dcache-load-misses     #    4.74% of all L1-dcache hits    (17.40%)
         76,88,612      LLC-loads                 #   17.795 M/sec                    (13.75%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         37,97,561      L1-icache-load-misses                                         (19.32%)
      40,74,36,218      dTLB-loads                #  942.996 M/sec                    (12.04%)
         18,76,350      dTLB-load-misses          #    0.46% of all dTLB cache hits   (12.94%)
          5,74,516      iTLB-loads                #    1.330 M/sec                    (11.10%)
          1,94,247      iTLB-load-misses          #   33.81% of all iTLB cache hits   (16.65%)
   <not supported>      L1-dcache-prefetches                                        
         38,71,887      L1-dcache-prefetch-misses #    8.961 M/sec                    (22.21%)

       1.219939881 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 25, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 49.02% complete, ETA 00:01:11
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        621.869941      task-clock (msec)         #    0.466 CPUs utilized          
               293      context-switches          #    0.471 K/sec                  
                46      cpu-migrations            #    0.074 K/sec                  
             3,491      page-faults               #    0.006 M/sec                  
    1,80,21,56,067      cycles                    #    2.898 GHz                      (26.33%)
    1,13,82,04,618      stalled-cycles-frontend   #   63.16% frontend cycles idle     (30.90%)
    1,73,22,95,259      instructions              #    0.96  insn per cycle         
                                                  #    0.66  stalled cycles per insn  (39.81%)
      30,41,76,643      branches                  #  489.132 M/sec                    (41.53%)
         94,40,185      branch-misses             #    3.10% of all branches          (42.87%)
      54,87,19,680      L1-dcache-loads           #  882.370 M/sec                    (19.92%)
       2,23,72,914      L1-dcache-load-misses     #    4.08% of all L1-dcache hits    (16.48%)
         91,68,022      LLC-loads                 #   14.743 M/sec                    (13.70%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         58,09,581      L1-icache-load-misses                                         (18.96%)
      60,72,35,307      dTLB-loads                #  976.467 M/sec                    (16.95%)
         12,69,128      dTLB-load-misses          #    0.21% of all dTLB cache hits   (12.86%)
          9,80,413      iTLB-loads                #    1.577 M/sec                    (11.07%)
          2,27,297      iTLB-load-misses          #   23.18% of all iTLB cache hits   (15.57%)
   <not supported>      L1-dcache-prefetches                                        
         50,03,035      L1-dcache-prefetch-misses #    8.045 M/sec                    (21.37%)

       1.334590610 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 25, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 50.00% complete, ETA 00:01:10
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 179141424.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        291.645435      task-clock (msec)         #    0.246 CPUs utilized          
               219      context-switches          #    0.751 K/sec                  
                36      cpu-migrations            #    0.123 K/sec                  
               154      page-faults               #    0.528 K/sec                  
      81,26,49,813      cycles                    #    2.786 GHz                      (24.13%)
      46,23,60,854      stalled-cycles-frontend   #   56.90% frontend cycles idle     (32.89%)
      76,85,06,210      instructions              #    0.95  insn per cycle         
                                                  #    0.60  stalled cycles per insn  (42.42%)
      14,28,65,310      branches                  #  489.860 M/sec                    (47.79%)
         59,08,226      branch-misses             #    4.14% of all branches          (53.18%)
      25,93,68,831      L1-dcache-loads           #  889.329 M/sec                    (25.61%)
       1,00,80,745      L1-dcache-load-misses     #    3.89% of all L1-dcache hits    (15.95%)
         49,57,140      LLC-loads                 #   16.997 M/sec                    (14.53%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         49,33,547      L1-icache-load-misses                                         (18.38%)
      26,25,15,915      dTLB-loads                #  900.120 M/sec                    (8.89%)
         16,09,408      dTLB-load-misses          #    0.61% of all dTLB cache hits   (9.59%)
          3,61,397      iTLB-loads                #    1.239 M/sec                    (8.22%)
            85,301      iTLB-load-misses          #   23.60% of all iTLB cache hits   (12.33%)
   <not supported>      L1-dcache-prefetches                                        
         27,50,783      L1-dcache-prefetch-misses #    9.432 M/sec                    (16.44%)

       1.183940674 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 26, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 50.98% complete, ETA 00:01:09
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

275196985.000 ns/op
Iteration   1: 166512863.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        770.657614      task-clock (msec)         #    0.558 CPUs utilized          
               375      context-switches          #    0.487 K/sec                  
                54      cpu-migrations            #    0.070 K/sec                  
             4,182      page-faults               #    0.005 M/sec                  
    2,17,44,12,422      cycles                    #    2.822 GHz                      (25.95%)
    1,22,41,19,611      stalled-cycles-frontend   #   56.30% frontend cycles idle     (29.83%)
    2,49,49,86,199      instructions              #    1.15  insn per cycle         
                                                  #    0.49  stalled cycles per insn  (38.41%)
      43,78,48,398      branches                  #  568.149 M/sec                    (41.05%)
       1,41,02,169      branch-misses             #    3.22% of all branches          (41.97%)
      75,83,29,308      L1-dcache-loads           #  984.003 M/sec                    (20.03%)
       2,70,82,267      L1-dcache-load-misses     #    3.57% of all L1-dcache hits    (15.90%)
       1,06,93,953      LLC-loads                 #   13.876 M/sec                    (13.70%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         84,41,802      L1-icache-load-misses                                         (20.15%)
      83,92,28,738      dTLB-loads                # 1088.977 M/sec                    (14.57%)
         18,35,597      dTLB-load-misses          #    0.22% of all dTLB cache hits   (14.93%)
         11,79,735      iTLB-loads                #    1.531 M/sec                    (11.90%)
          3,60,051      iTLB-load-misses          #   30.52% of all iTLB cache hits   (17.02%)
   <not supported>      L1-dcache-prefetches                                        
         71,50,151      L1-dcache-prefetch-misses #    9.278 M/sec                    (22.95%)

       1.381971096 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 26, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 51.96% complete, ETA 00:01:08
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        151.268853      task-clock (msec)         #    0.136 CPUs utilized          
               211      context-switches          #    0.001 M/sec                  
                48      cpu-migrations            #    0.317 K/sec                  
               152      page-faults               #    0.001 M/sec                  
      39,22,74,740      cycles                    #    2.593 GHz                      (19.23%)
      24,79,43,310      stalled-cycles-frontend   #   63.21% frontend cycles idle     (32.78%)
      33,57,08,690      instructions              #    0.86  insn per cycle         
                                                  #    0.74  stalled cycles per insn  (45.18%)
       5,80,01,440      branches                  #  383.433 M/sec                    (58.26%)
         28,45,561      branch-misses             #    4.91% of all branches          (63.12%)
      10,13,77,291      L1-dcache-loads           #  670.180 M/sec                    (14.72%)
         65,81,493      L1-dcache-load-misses     #    6.49% of all L1-dcache hits    (8.09%)
         33,36,688      LLC-loads                 #   22.058 M/sec                    (10.36%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         19,45,574      L1-icache-load-misses                                         (15.63%)
      14,38,03,144      dTLB-loads                #  950.646 M/sec                    (10.55%)
          8,40,937      dTLB-load-misses          #    0.58% of all dTLB cache hits   (10.36%)
          1,83,532      iTLB-loads                #    1.213 M/sec                    (7.72%)
            33,169      iTLB-load-misses          #   18.07% of all iTLB cache hits   (9.04%)
   <not supported>      L1-dcache-prefetches                                        
         19,61,146      L1-dcache-prefetch-misses #   12.965 M/sec                    (11.67%)

       1.112472676 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 27, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 52.94% complete, ETA 00:01:06
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 278942090.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        372.550893      task-clock (msec)         #    0.303 CPUs utilized          
               249      context-switches          #    0.668 K/sec                  
                34      cpu-migrations            #    0.091 K/sec                  
             2,382      page-faults               #    0.006 M/sec                  
    1,04,01,69,363      cycles                    #    2.792 GHz                      (23.99%)
      59,06,71,460      stalled-cycles-frontend   #   56.79% frontend cycles idle     (31.11%)
    1,19,20,66,999      instructions              #    1.15  insn per cycle         
                                                  #    0.50  stalled cycles per insn  (42.04%)
      20,66,47,199      branches                  #  554.682 M/sec                    (45.86%)
         58,11,750      branch-misses             #    2.81% of all branches          (49.52%)
      36,57,16,338      L1-dcache-loads           #  981.655 M/sec                    (20.71%)
       1,26,55,921      L1-dcache-load-misses     #    3.46% of all L1-dcache hits    (12.99%)
         55,14,837      LLC-loads                 #   14.803 M/sec                    (12.50%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         43,73,297      L1-icache-load-misses                                         (18.36%)
      38,12,44,000      dTLB-loads                # 1023.334 M/sec                    (14.44%)
          9,75,871      dTLB-load-misses          #    0.26% of all dTLB cache hits   (11.16%)
          5,48,301      iTLB-loads                #    1.472 M/sec                    (10.72%)
          1,00,917      iTLB-load-misses          #   18.41% of all iTLB cache hits   (15.37%)
   <not supported>      L1-dcache-prefetches                                        
         42,38,375      L1-dcache-prefetch-misses #   11.377 M/sec                    (18.99%)

       1.227574211 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 27, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 53.92% complete, ETA 00:01:05
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

185001343.000 ns/op
Iteration   1: 276245985.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        325.475787      task-clock (msec)         #    0.272 CPUs utilized          
               230      context-switches          #    0.707 K/sec                  
                24      cpu-migrations            #    0.074 K/sec                  
               146      page-faults               #    0.449 K/sec                  
      86,25,50,063      cycles                    #    2.650 GHz                      (27.12%)
      52,12,68,576      stalled-cycles-frontend   #   60.43% frontend cycles idle     (32.81%)
      74,27,99,778      instructions              #    0.86  insn per cycle         
                                                  #    0.70  stalled cycles per insn  (41.54%)
      13,49,91,995      branches                  #  414.753 M/sec                    (44.99%)
         59,44,703      branch-misses             #    4.40% of all branches          (47.22%)
      26,37,75,068      L1-dcache-loads           #  810.429 M/sec                    (18.69%)
       1,51,63,355      L1-dcache-load-misses     #    5.75% of all L1-dcache hits    (14.01%)
         69,17,603      LLC-loads                 #   21.254 M/sec                    (12.26%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         22,24,908      L1-icache-load-misses                                         (18.17%)
      28,84,75,339      dTLB-loads                #  886.319 M/sec                    (11.90%)
         16,45,808      dTLB-load-misses          #    0.57% of all dTLB cache hits   (13.63%)
          3,46,505      iTLB-loads                #    1.065 M/sec                    (11.21%)
          1,19,211      iTLB-load-misses          #   34.40% of all iTLB cache hits   (16.31%)
   <not supported>      L1-dcache-prefetches                                        
         29,82,314      L1-dcache-prefetch-misses #    9.163 M/sec                    (19.98%)

       1.196398377 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 28, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 54.90% complete, ETA 00:01:03
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        466.722997      task-clock (msec)         #    0.364 CPUs utilized          
               287      context-switches          #    0.615 K/sec                  
                45      cpu-migrations            #    0.096 K/sec                  
             3,000      page-faults               #    0.006 M/sec                  
    1,33,49,04,860      cycles                    #    2.860 GHz                      (27.42%)
      77,26,73,369      stalled-cycles-frontend   #   57.88% frontend cycles idle     (32.32%)
    1,41,77,86,672      instructions              #    1.06  insn per cycle         
                                                  #    0.54  stalled cycles per insn  (40.72%)
      24,12,96,174      branches                  #  517.001 M/sec                    (43.37%)
         78,20,802      branch-misses             #    3.24% of all branches          (44.87%)
      45,04,86,450      L1-dcache-loads           #  965.212 M/sec                    (23.64%)
       1,66,41,069      L1-dcache-load-misses     #    3.69% of all L1-dcache hits    (15.66%)
         70,05,214      LLC-loads                 #   15.009 M/sec                    (13.42%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         37,02,513      L1-icache-load-misses                                         (18.79%)
      55,15,80,706      dTLB-loads                # 1181.816 M/sec                    (15.98%)
         12,52,489      dTLB-load-misses          #    0.23% of all dTLB cache hits   (11.17%)
          7,51,546      iTLB-loads                #    1.610 M/sec                    (10.31%)
            89,113      iTLB-load-misses          #   11.86% of all iTLB cache hits   (15.45%)
   <not supported>      L1-dcache-prefetches                                        
         50,91,639      L1-dcache-prefetch-misses #   10.909 M/sec                    (20.59%)

       1.282585386 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 28, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 55.88% complete, ETA 00:01:02
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 161734781.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        247.567032      task-clock (msec)         #    0.212 CPUs utilized          
               206      context-switches          #    0.832 K/sec                  
                40      cpu-migrations            #    0.162 K/sec                  
               138      page-faults               #    0.557 K/sec                  
      65,22,67,670      cycles                    #    2.635 GHz                      (24.77%)
      37,07,57,897      stalled-cycles-frontend   #   56.84% frontend cycles idle     (32.27%)
      58,39,76,260      instructions              #    0.90  insn per cycle         
                                                  #    0.63  stalled cycles per insn  (44.35%)
      10,88,33,766      branches                  #  439.613 M/sec                    (48.91%)
         44,61,370      branch-misses             #    4.10% of all branches          (51.47%)
      22,15,47,150      L1-dcache-loads           #  894.898 M/sec                    (23.12%)
         97,74,442      L1-dcache-load-misses     #    4.41% of all L1-dcache hits    (13.41%)
         58,81,201      LLC-loads                 #   23.756 M/sec                    (10.23%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         13,74,687      L1-icache-load-misses                                         (15.13%)
      23,92,40,375      dTLB-loads                #  966.366 M/sec                    (11.54%)
         15,51,717      dTLB-load-misses          #    0.65% of all dTLB cache hits   (9.90%)
          3,22,440      iTLB-loads                #    1.302 M/sec                    (9.90%)
            65,409      iTLB-load-misses          #   20.29% of all iTLB cache hits   (14.85%)
   <not supported>      L1-dcache-prefetches                                        
         27,82,775      L1-dcache-prefetch-misses #   11.240 M/sec                    (19.81%)

       1.166440616 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 29, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 56.86% complete, ETA 00:01:01
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

300986455.000 ns/op
Iteration   1: 172337565.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        505.698612      task-clock (msec)         #    0.399 CPUs utilized          
               349      context-switches          #    0.690 K/sec                  
                65      cpu-migrations            #    0.129 K/sec                  
             4,249      page-faults               #    0.008 M/sec                  
    1,44,85,29,235      cycles                    #    2.864 GHz                      (26.21%)
      84,53,82,933      stalled-cycles-frontend   #   58.36% frontend cycles idle     (31.73%)
    1,55,58,69,493      instructions              #    1.07  insn per cycle         
                                                  #    0.54  stalled cycles per insn  (39.56%)
      28,08,42,630      branches                  #  555.356 M/sec                    (41.44%)
         92,51,215      branch-misses             #    3.29% of all branches          (43.15%)
      50,24,71,552      L1-dcache-loads           #  993.619 M/sec                    (26.90%)
       1,83,15,946      L1-dcache-load-misses     #    3.65% of all L1-dcache hits    (20.22%)
         76,09,189      LLC-loads                 #   15.047 M/sec                    (17.83%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         63,61,391      L1-icache-load-misses                                         (21.73%)
      54,47,48,194      dTLB-loads                # 1077.219 M/sec                    (15.08%)
         12,26,381      dTLB-load-misses          #    0.23% of all dTLB cache hits   (11.70%)
          5,77,221      iTLB-loads                #    1.141 M/sec                    (10.83%)
          1,12,709      iTLB-load-misses          #   19.53% of all iTLB cache hits   (16.36%)
   <not supported>      L1-dcache-prefetches                                        
         53,53,588      L1-dcache-prefetch-misses #   10.587 M/sec                    (22.24%)

       1.267709546 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 29, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 57.84% complete, ETA 00:00:59
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        217.724938      task-clock (msec)         #    0.189 CPUs utilized          
               184      context-switches          #    0.845 K/sec                  
                39      cpu-migrations            #    0.179 K/sec                  
               159      page-faults               #    0.730 K/sec                  
      56,35,45,557      cycles                    #    2.588 GHz                      (25.84%)
      34,76,13,778      stalled-cycles-frontend   #   61.68% frontend cycles idle     (32.13%)
      51,30,07,668      instructions              #    0.91  insn per cycle         
                                                  #    0.68  stalled cycles per insn  (43.38%)
       9,85,66,442      branches                  #  452.711 M/sec                    (46.95%)
         40,35,568      branch-misses             #    4.09% of all branches          (50.96%)
      15,89,70,768      L1-dcache-loads           #  730.145 M/sec                    (21.80%)
       1,07,82,695      L1-dcache-load-misses     #    6.78% of all L1-dcache hits    (11.45%)
         53,57,058      LLC-loads                 #   24.605 M/sec                    (10.99%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         11,61,022      L1-icache-load-misses                                         (16.49%)
      19,56,65,181      dTLB-loads                #  898.681 M/sec                    (12.84%)
         15,53,940      dTLB-load-misses          #    0.79% of all dTLB cache hits   (11.01%)
          3,49,559      iTLB-loads                #    1.606 M/sec                    (11.03%)
          1,27,047      iTLB-load-misses          #   36.34% of all iTLB cache hits   (16.42%)
   <not supported>      L1-dcache-prefetches                                        
         22,48,829      L1-dcache-prefetch-misses #   10.329 M/sec                    (21.00%)

       1.151962759 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 30, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 58.82% complete, ETA 00:00:58
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 335451817.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        577.120430      task-clock (msec)         #    0.431 CPUs utilized          
               290      context-switches          #    0.502 K/sec                  
                41      cpu-migrations            #    0.071 K/sec                  
             4,220      page-faults               #    0.007 M/sec                  
    1,68,67,08,880      cycles                    #    2.923 GHz                      (26.25%)
    1,09,81,93,324      stalled-cycles-frontend   #   65.11% frontend cycles idle     (31.04%)
    1,60,00,01,856      instructions              #    0.95  insn per cycle         
                                                  #    0.69  stalled cycles per insn  (39.64%)
      28,72,63,488      branches                  #  497.753 M/sec                    (40.93%)
         80,46,825      branch-misses             #    2.80% of all branches          (43.51%)
      52,08,63,471      L1-dcache-loads           #  902.521 M/sec                    (21.51%)
       1,82,22,935      L1-dcache-load-misses     #    3.50% of all L1-dcache hits    (15.07%)
         76,43,954      LLC-loads                 #   13.245 M/sec                    (13.45%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         73,67,708      L1-icache-load-misses                                         (19.16%)
      51,53,73,139      dTLB-loads                #  893.008 M/sec                    (12.20%)
         17,11,356      dTLB-load-misses          #    0.33% of all dTLB cache hits   (14.68%)
          7,75,383      iTLB-loads                #    1.344 M/sec                    (11.09%)
          1,63,932      iTLB-load-misses          #   21.14% of all iTLB cache hits   (15.26%)
   <not supported>      L1-dcache-prefetches                                        
         52,56,566      L1-dcache-prefetch-misses #    9.108 M/sec                    (19.71%)

       1.339707440 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 30, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 59.80% complete, ETA 00:00:57
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

214559890.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        356.743638      task-clock (msec)         #    0.298 CPUs utilized          
               224      context-switches          #    0.628 K/sec                  
                29      cpu-migrations            #    0.081 K/sec                  
               227      page-faults               #    0.636 K/sec                  
      98,97,94,723      cycles                    #    2.775 GHz                      (25.55%)
      51,50,89,474      stalled-cycles-frontend   #   52.04% frontend cycles idle     (29.48%)
    1,09,60,24,166      instructions              #    1.11  insn per cycle         
                                                  #    0.47  stalled cycles per insn  (38.87%)
      18,87,66,172      branches                  #  529.137 M/sec                    (41.17%)
         67,15,162      branch-misses             #    3.56% of all branches          (45.59%)
      32,86,17,082      L1-dcache-loads           #  921.158 M/sec                    (24.99%)
       1,29,41,904      L1-dcache-load-misses     #    3.94% of all L1-dcache hits    (14.03%)
         60,80,120      LLC-loads                 #   17.043 M/sec                    (14.78%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         27,97,116      L1-icache-load-misses                                         (20.76%)
      35,50,14,576      dTLB-loads                #  995.153 M/sec                    (15.98%)
         16,75,546      dTLB-load-misses          #    0.47% of all dTLB cache hits   (11.51%)
          4,27,775      iTLB-loads                #    1.199 M/sec                    (11.01%)
          1,69,196      iTLB-load-misses          #   39.55% of all iTLB cache hits   (16.43%)
   <not supported>      L1-dcache-prefetches                                        
         33,06,926      L1-dcache-prefetch-misses #    9.270 M/sec                    (21.61%)

       1.197604176 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 31, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 60.78% complete, ETA 00:00:55
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

299332920.000 ns/op
Iteration   1: 175533535.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        520.668429      task-clock (msec)         #    0.401 CPUs utilized          
               291      context-switches          #    0.559 K/sec                  
                40      cpu-migrations            #    0.077 K/sec                  
             2,880      page-faults               #    0.006 M/sec                  
    1,47,25,39,492      cycles                    #    2.828 GHz                      (24.05%)
      76,86,73,008      stalled-cycles-frontend   #   52.20% frontend cycles idle     (29.43%)
    1,78,26,42,113      instructions              #    1.21  insn per cycle         
                                                  #    0.43  stalled cycles per insn  (39.91%)
      30,95,78,465      branches                  #  594.579 M/sec                    (42.73%)
         84,63,477      branch-misses             #    2.73% of all branches          (44.80%)
      56,55,79,731      L1-dcache-loads           # 1086.257 M/sec                    (24.41%)
       1,92,55,974      L1-dcache-load-misses     #    3.40% of all L1-dcache hits    (15.70%)
         68,95,213      LLC-loads                 #   13.243 M/sec                    (15.71%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         79,05,973      L1-icache-load-misses                                         (20.59%)
      54,44,52,276      dTLB-loads                # 1045.679 M/sec                    (15.61%)
         13,82,397      dTLB-load-misses          #    0.25% of all dTLB cache hits   (10.74%)
          9,02,235      iTLB-loads                #    1.733 M/sec                    (10.74%)
          1,72,057      iTLB-load-misses          #   19.07% of all iTLB cache hits   (16.11%)
   <not supported>      L1-dcache-prefetches                                        
         56,90,856      L1-dcache-prefetch-misses #   10.930 M/sec                    (21.49%)

       1.298220914 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 31, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 61.76% complete, ETA 00:00:54
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        298.195217      task-clock (msec)         #    0.252 CPUs utilized          
               209      context-switches          #    0.701 K/sec                  
                40      cpu-migrations            #    0.134 K/sec                  
               203      page-faults               #    0.681 K/sec                  
      81,32,20,499      cycles                    #    2.727 GHz                      (21.62%)
      47,13,57,764      stalled-cycles-frontend   #   57.96% frontend cycles idle     (27.48%)
      74,37,74,505      instructions              #    0.91  insn per cycle         
                                                  #    0.63  stalled cycles per insn  (36.56%)
      14,47,28,196      branches                  #  485.347 M/sec                    (40.41%)
         59,99,222      branch-misses             #    4.15% of all branches          (44.90%)
      29,57,73,355      L1-dcache-loads           #  991.878 M/sec                    (24.61%)
       1,19,81,032      L1-dcache-load-misses     #    4.05% of all L1-dcache hits    (14.73%)
         58,45,819      LLC-loads                 #   19.604 M/sec                    (14.34%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         38,84,871      L1-icache-load-misses                                         (21.20%)
      20,88,46,230      dTLB-loads                #  700.367 M/sec                    (18.06%)
         14,88,837      dTLB-load-misses          #    0.71% of all dTLB cache hits   (11.65%)
          3,13,141      iTLB-loads                #    1.050 M/sec                    (10.72%)
            76,072      iTLB-load-misses          #   24.29% of all iTLB cache hits   (15.31%)
   <not supported>      L1-dcache-prefetches                                        
         34,98,499      L1-dcache-prefetch-misses #   11.732 M/sec                    (18.00%)

       1.183581446 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 32, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 62.75% complete, ETA 00:00:53
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 379147643.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        615.856074      task-clock (msec)         #    0.459 CPUs utilized          
               302      context-switches          #    0.490 K/sec                  
                47      cpu-migrations            #    0.076 K/sec                  
             4,024      page-faults               #    0.007 M/sec                  
    1,79,37,88,711      cycles                    #    2.913 GHz                      (26.42%)
    1,15,49,24,299      stalled-cycles-frontend   #   64.38% frontend cycles idle     (31.29%)
    1,77,94,16,376      instructions              #    0.99  insn per cycle         
                                                  #    0.65  stalled cycles per insn  (41.10%)
      29,79,62,352      branches                  #  483.818 M/sec                    (43.61%)
         88,77,205      branch-misses             #    2.98% of all branches          (45.64%)
      51,04,87,285      L1-dcache-loads           #  828.907 M/sec                    (20.16%)
       2,09,34,895      L1-dcache-load-misses     #    4.10% of all L1-dcache hits    (12.81%)
         81,96,792      LLC-loads                 #   13.310 M/sec                    (13.07%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         57,60,361      L1-icache-load-misses                                         (16.32%)
      58,31,27,436      dTLB-loads                #  946.857 M/sec                    (12.98%)
         12,88,400      dTLB-load-misses          #    0.22% of all dTLB cache hits   (11.56%)
          9,21,161      iTLB-loads                #    1.496 M/sec                    (12.03%)
          2,55,797      iTLB-load-misses          #   27.77% of all iTLB cache hits   (15.92%)
   <not supported>      L1-dcache-prefetches                                        
         56,16,660      L1-dcache-prefetch-misses #    9.120 M/sec                    (20.81%)

       1.341789859 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 32, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 63.73% complete, ETA 00:00:51
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

204448313.000 ns/op
Iteration   1: 310285210.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        258.081032      task-clock (msec)         #    0.220 CPUs utilized          
               217      context-switches          #    0.841 K/sec                  
                24      cpu-migrations            #    0.093 K/sec                  
               140      page-faults               #    0.542 K/sec                  
      68,95,88,781      cycles                    #    2.672 GHz                      (25.58%)
      38,41,30,848      stalled-cycles-frontend   #   55.70% frontend cycles idle     (33.25%)
      68,29,23,600      instructions              #    0.99  insn per cycle         
                                                  #    0.56  stalled cycles per insn  (43.59%)
      12,46,89,828      branches                  #  483.142 M/sec                    (48.57%)
         50,96,397      branch-misses             #    4.09% of all branches          (49.97%)
      19,88,40,157      L1-dcache-loads           #  770.456 M/sec                    (24.66%)
         97,78,920      L1-dcache-load-misses     #    4.92% of all L1-dcache hits    (13.82%)
         44,00,906      LLC-loads                 #   17.052 M/sec                    (11.66%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         30,81,346      L1-icache-load-misses                                         (16.30%)
      24,50,01,591      dTLB-loads                #  949.320 M/sec                    (10.83%)
         13,63,131      dTLB-load-misses          #    0.56% of all dTLB cache hits   (9.28%)
          2,99,598      iTLB-loads                #    1.161 M/sec                    (9.28%)
            69,817      iTLB-load-misses          #   23.30% of all iTLB cache hits   (13.93%)
   <not supported>      L1-dcache-prefetches                                        
         27,01,804      L1-dcache-prefetch-misses #   10.469 M/sec                    (19.06%)

       1.175624167 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 33, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 64.71% complete, ETA 00:00:50
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        526.634444      task-clock (msec)         #    0.403 CPUs utilized          
               267      context-switches          #    0.507 K/sec                  
                39      cpu-migrations            #    0.074 K/sec                  
             4,465      page-faults               #    0.008 M/sec                  
    1,48,94,42,167      cycles                    #    2.828 GHz                      (26.41%)
      82,83,96,910      stalled-cycles-frontend   #   55.62% frontend cycles idle     (30.34%)
    1,67,82,57,735      instructions              #    1.13  insn per cycle         
                                                  #    0.49  stalled cycles per insn  (39.49%)
      30,27,75,301      branches                  #  574.925 M/sec                    (42.31%)
         83,20,158      branch-misses             #    2.75% of all branches          (43.22%)
      58,69,01,470      L1-dcache-loads           # 1114.438 M/sec                    (22.10%)
       1,83,30,048      L1-dcache-load-misses     #    3.12% of all L1-dcache hits    (12.92%)
         78,31,322      LLC-loads                 #   14.871 M/sec                    (13.48%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         60,18,108      L1-icache-load-misses                                         (20.07%)
      58,83,64,587      dTLB-loads                # 1117.216 M/sec                    (16.81%)
         13,78,421      dTLB-load-misses          #    0.23% of all dTLB cache hits   (12.52%)
          7,13,398      iTLB-loads                #    1.355 M/sec                    (11.83%)
          1,86,517      iTLB-load-misses          #   26.14% of all iTLB cache hits   (17.35%)
   <not supported>      L1-dcache-prefetches                                        
         53,92,455      L1-dcache-prefetch-misses #   10.239 M/sec                    (23.19%)

       1.307286791 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 33, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 65.69% complete, ETA 00:00:48
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 213741431.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        301.042898      task-clock (msec)         #    0.252 CPUs utilized          
               213      context-switches          #    0.708 K/sec                  
                30      cpu-migrations            #    0.100 K/sec                  
               144      page-faults               #    0.478 K/sec                  
      81,92,24,820      cycles                    #    2.721 GHz                      (21.73%)
      49,08,44,014      stalled-cycles-frontend   #   59.92% frontend cycles idle     (25.40%)
      74,26,35,218      instructions              #    0.91  insn per cycle         
                                                  #    0.66  stalled cycles per insn  (34.17%)
      13,22,19,779      branches                  #  439.206 M/sec                    (37.93%)
         54,74,796      branch-misses             #    4.14% of all branches          (42.88%)
      26,82,71,081      L1-dcache-loads           #  891.139 M/sec                    (18.91%)
       1,15,35,934      L1-dcache-load-misses     #    4.30% of all L1-dcache hits    (17.11%)
         54,17,437      LLC-loads                 #   17.996 M/sec                    (14.14%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         18,31,840      L1-icache-load-misses                                         (20.41%)
      23,35,30,184      dTLB-loads                #  775.737 M/sec                    (14.11%)
         14,46,649      dTLB-load-misses          #    0.62% of all dTLB cache hits   (12.73%)
          3,08,131      iTLB-loads                #    1.024 M/sec                    (11.52%)
            76,078      iTLB-load-misses          #   24.69% of all iTLB cache hits   (14.91%)
   <not supported>      L1-dcache-prefetches                                        
         34,16,230      L1-dcache-prefetch-misses #   11.348 M/sec                    (17.57%)

       1.194597500 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 34, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 66.67% complete, ETA 00:00:47
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

284392026.000 ns/op
Iteration   1: 198516790.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        484.113241      task-clock (msec)         #    0.369 CPUs utilized          
               277      context-switches          #    0.572 K/sec                  
                43      cpu-migrations            #    0.089 K/sec                  
             3,382      page-faults               #    0.007 M/sec                  
    1,37,75,82,451      cycles                    #    2.846 GHz                      (24.33%)
      72,51,75,843      stalled-cycles-frontend   #   52.64% frontend cycles idle     (28.95%)
    1,70,12,88,034      instructions              #    1.23  insn per cycle         
                                                  #    0.43  stalled cycles per insn  (37.83%)
      29,84,27,314      branches                  #  616.441 M/sec                    (40.68%)
         80,70,350      branch-misses             #    2.70% of all branches          (44.22%)
      53,77,21,877      L1-dcache-loads           # 1110.736 M/sec                    (25.61%)
       1,74,30,179      L1-dcache-load-misses     #    3.24% of all L1-dcache hits    (15.83%)
         75,72,236      LLC-loads                 #   15.641 M/sec                    (15.05%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         38,12,194      L1-icache-load-misses                                         (20.80%)
      58,67,59,019      dTLB-loads                # 1212.028 M/sec                    (16.99%)
         12,65,607      dTLB-load-misses          #    0.22% of all dTLB cache hits   (12.82%)
          5,96,846      iTLB-loads                #    1.233 M/sec                    (10.67%)
          1,40,744      iTLB-load-misses          #   23.58% of all iTLB cache hits   (15.71%)
   <not supported>      L1-dcache-prefetches                                        
         55,54,391      L1-dcache-prefetch-misses #   11.473 M/sec                    (20.64%)

       1.311984001 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 34, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 67.65% complete, ETA 00:00:46
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        382.149570      task-clock (msec)         #    0.310 CPUs utilized          
               232      context-switches          #    0.607 K/sec                  
                35      cpu-migrations            #    0.092 K/sec                  
               139      page-faults               #    0.364 K/sec                  
    1,08,11,05,091      cycles                    #    2.829 GHz                      (24.07%)
      58,82,02,744      stalled-cycles-frontend   #   54.41% frontend cycles idle     (29.32%)
    1,12,61,76,495      instructions              #    1.04  insn per cycle         
                                                  #    0.52  stalled cycles per insn  (38.66%)
      19,22,21,668      branches                  #  503.001 M/sec                    (42.54%)
         75,99,636      branch-misses             #    3.95% of all branches          (46.31%)
      30,39,81,506      L1-dcache-loads           #  795.452 M/sec                    (28.99%)
       1,57,91,571      L1-dcache-load-misses     #    5.19% of all L1-dcache hits    (16.49%)
         67,83,233      LLC-loads                 #   17.750 M/sec                    (12.60%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         29,89,398      L1-icache-load-misses                                         (17.83%)
      43,58,48,973      dTLB-loads                # 1140.519 M/sec                    (13.82%)
         16,40,231      dTLB-load-misses          #    0.38% of all dTLB cache hits   (10.45%)
          3,01,137      iTLB-loads                #    0.788 M/sec                    (10.45%)
            46,839      iTLB-load-misses          #   15.55% of all iTLB cache hits   (15.68%)
   <not supported>      L1-dcache-prefetches                                        
         41,96,078      L1-dcache-prefetch-misses #   10.980 M/sec                    (20.91%)

       1.232768851 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 35, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 68.63% complete, ETA 00:00:44
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 332936484.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        510.615033      task-clock (msec)         #    0.394 CPUs utilized          
               288      context-switches          #    0.564 K/sec                  
                39      cpu-migrations            #    0.076 K/sec                  
             2,539      page-faults               #    0.005 M/sec                  
    1,44,12,38,769      cycles                    #    2.823 GHz                      (27.34%)
      78,94,73,388      stalled-cycles-frontend   #   54.78% frontend cycles idle     (30.27%)
    1,71,82,32,109      instructions              #    1.19  insn per cycle         
                                                  #    0.46  stalled cycles per insn  (38.52%)
      31,08,98,287      branches                  #  608.870 M/sec                    (39.44%)
         82,91,981      branch-misses             #    2.67% of all branches          (40.98%)
      57,96,80,569      L1-dcache-loads           # 1135.260 M/sec                    (23.78%)
       1,89,91,495      L1-dcache-load-misses     #    3.28% of all L1-dcache hits    (13.91%)
         71,26,909      LLC-loads                 #   13.957 M/sec                    (13.36%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         80,49,240      L1-icache-load-misses                                         (20.40%)
      53,17,54,266      dTLB-loads                # 1041.400 M/sec                    (18.76%)
         12,27,711      dTLB-load-misses          #    0.23% of all dTLB cache hits   (13.60%)
          7,20,682      iTLB-loads                #    1.411 M/sec                    (12.04%)
          1,53,906      iTLB-load-misses          #   21.36% of all iTLB cache hits   (17.17%)
   <not supported>      L1-dcache-prefetches                                        
         54,40,453      L1-dcache-prefetch-misses #   10.655 M/sec                    (22.64%)

       1.296442627 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 35, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 69.61% complete, ETA 00:00:43
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

186526312.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        311.296961      task-clock (msec)         #    0.261 CPUs utilized          
               246      context-switches          #    0.790 K/sec                  
                32      cpu-migrations            #    0.103 K/sec                  
               214      page-faults               #    0.687 K/sec                  
      85,60,01,563      cycles                    #    2.750 GHz                      (27.50%)
      50,02,89,983      stalled-cycles-frontend   #   58.44% frontend cycles idle     (31.94%)
      85,06,48,878      instructions              #    0.99  insn per cycle         
                                                  #    0.59  stalled cycles per insn  (42.64%)
      15,28,02,203      branches                  #  490.857 M/sec                    (45.88%)
         59,66,169      branch-misses             #    3.90% of all branches          (48.22%)
      33,15,54,392      L1-dcache-loads           # 1065.074 M/sec                    (21.67%)
       1,23,41,862      L1-dcache-load-misses     #    3.72% of all L1-dcache hits    (12.95%)
         59,73,510      LLC-loads                 #   19.189 M/sec                    (13.77%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         32,98,314      L1-icache-load-misses                                         (19.12%)
      27,70,37,483      dTLB-loads                #  889.946 M/sec                    (14.87%)
         15,49,259      dTLB-load-misses          #    0.56% of all dTLB cache hits   (10.03%)
          3,71,365      iTLB-loads                #    1.193 M/sec                    (10.26%)
          1,47,452      iTLB-load-misses          #   39.71% of all iTLB cache hits   (15.39%)
   <not supported>      L1-dcache-prefetches                                        
         31,84,289      L1-dcache-prefetch-misses #   10.229 M/sec                    (20.53%)

       1.194614609 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 36, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 70.59% complete, ETA 00:00:42
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

336402099.000 ns/op
Iteration   1: 215891550.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        680.458931      task-clock (msec)         #    0.494 CPUs utilized          
               328      context-switches          #    0.482 K/sec                  
                63      cpu-migrations            #    0.093 K/sec                  
             4,965      page-faults               #    0.007 M/sec                  
    1,92,54,92,243      cycles                    #    2.830 GHz                      (26.34%)
    1,14,56,34,899      stalled-cycles-frontend   #   59.50% frontend cycles idle     (29.16%)
    2,06,77,58,499      instructions              #    1.07  insn per cycle         
                                                  #    0.55  stalled cycles per insn  (37.09%)
      36,78,09,980      branches                  #  540.532 M/sec                    (38.56%)
       1,18,33,483      branch-misses             #    3.22% of all branches          (40.10%)
      67,47,31,400      L1-dcache-loads           #  991.583 M/sec                    (24.98%)
       2,41,45,453      L1-dcache-load-misses     #    3.58% of all L1-dcache hits    (15.12%)
         93,71,053      LLC-loads                 #   13.772 M/sec                    (13.15%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         87,00,072      L1-icache-load-misses                                         (19.23%)
      74,68,08,907      dTLB-loads                # 1097.508 M/sec                    (17.81%)
         14,90,409      dTLB-load-misses          #    0.20% of all dTLB cache hits   (12.87%)
          8,37,828      iTLB-loads                #    1.231 M/sec                    (13.83%)
          3,28,830      iTLB-load-misses          #   39.25% of all iTLB cache hits   (19.45%)
   <not supported>      L1-dcache-prefetches                                        
         62,77,192      L1-dcache-prefetch-misses #    9.225 M/sec                    (24.74%)

       1.376233825 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 36, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 71.57% complete, ETA 00:00:40
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        509.857969      task-clock (msec)         #    0.390 CPUs utilized          
               303      context-switches          #    0.594 K/sec                  
                51      cpu-migrations            #    0.100 K/sec                  
               519      page-faults               #    0.001 M/sec                  
    1,45,11,47,297      cycles                    #    2.846 GHz                      (24.36%)
      92,82,63,005      stalled-cycles-frontend   #   63.97% frontend cycles idle     (29.04%)
    1,35,14,41,209      instructions              #    0.93  insn per cycle         
                                                  #    0.69  stalled cycles per insn  (39.26%)
      23,97,95,164      branches                  #  470.318 M/sec                    (41.72%)
         85,54,811      branch-misses             #    3.57% of all branches          (44.54%)
      37,48,35,674      L1-dcache-loads           #  735.177 M/sec                    (24.44%)
       1,85,16,666      L1-dcache-load-misses     #    4.94% of all L1-dcache hits    (24.13%)
         88,28,326      LLC-loads                 #   17.315 M/sec                    (20.10%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         66,99,341      L1-icache-load-misses                                         (20.38%)
      38,94,32,489      dTLB-loads                #  763.806 M/sec                    (15.30%)
         29,00,545      dTLB-load-misses          #    0.74% of all dTLB cache hits   (14.24%)
          4,37,162      iTLB-loads                #    0.857 M/sec                    (10.96%)
          1,08,101      iTLB-load-misses          #   24.73% of all iTLB cache hits   (14.85%)
   <not supported>      L1-dcache-prefetches                                        
         45,26,787      L1-dcache-prefetch-misses #    8.879 M/sec                    (20.33%)

       1.306292042 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 37, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 72.55% complete, ETA 00:00:39
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 314215995.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        531.805527      task-clock (msec)         #    0.398 CPUs utilized          
               282      context-switches          #    0.530 K/sec                  
                42      cpu-migrations            #    0.079 K/sec                  
             3,155      page-faults               #    0.006 M/sec                  
    1,53,19,90,508      cycles                    #    2.881 GHz                      (27.21%)
      85,63,73,373      stalled-cycles-frontend   #   55.90% frontend cycles idle     (28.56%)
    1,74,57,78,058      instructions              #    1.14  insn per cycle         
                                                  #    0.49  stalled cycles per insn  (37.50%)
      30,56,21,829      branches                  #  574.687 M/sec                    (39.92%)
         89,62,544      branch-misses             #    2.93% of all branches          (41.97%)
      60,07,44,913      L1-dcache-loads           # 1129.633 M/sec                    (23.58%)
       1,79,53,655      L1-dcache-load-misses     #    2.99% of all L1-dcache hits    (13.62%)
         74,02,820      LLC-loads                 #   13.920 M/sec                    (13.62%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         53,68,585      L1-icache-load-misses                                         (19.60%)
      58,21,80,796      dTLB-loads                # 1094.725 M/sec                    (16.49%)
         12,18,842      dTLB-load-misses          #    0.21% of all dTLB cache hits   (12.44%)
          6,39,244      iTLB-loads                #    1.202 M/sec                    (12.00%)
          1,18,330      iTLB-load-misses          #   18.51% of all iTLB cache hits   (18.00%)
   <not supported>      L1-dcache-prefetches                                        
         54,73,064      L1-dcache-prefetch-misses #   10.291 M/sec                    (23.92%)

       1.335588180 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 37, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 73.53% complete, ETA 00:00:38
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

239344173.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        393.130236      task-clock (msec)         #    0.314 CPUs utilized          
               243      context-switches          #    0.618 K/sec                  
                26      cpu-migrations            #    0.066 K/sec                  
               159      page-faults               #    0.404 K/sec                  
    1,12,06,08,403      cycles                    #    2.850 GHz                      (23.13%)
      71,56,43,213      stalled-cycles-frontend   #   63.86% frontend cycles idle     (28.80%)
      89,81,75,429      instructions              #    0.80  insn per cycle         
                                                  #    0.80  stalled cycles per insn  (40.36%)
      16,75,67,250      branches                  #  426.239 M/sec                    (44.06%)
         66,54,310      branch-misses             #    3.97% of all branches          (47.36%)
      31,56,68,229      L1-dcache-loads           #  802.961 M/sec                    (21.57%)
       1,42,39,191      L1-dcache-load-misses     #    4.51% of all L1-dcache hits    (18.17%)
         69,19,706      LLC-loads                 #   17.602 M/sec                    (14.12%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         26,55,632      L1-icache-load-misses                                         (19.17%)
      30,66,87,194      dTLB-loads                #  780.116 M/sec                    (13.33%)
         21,29,774      dTLB-load-misses          #    0.69% of all dTLB cache hits   (13.32%)
          4,33,621      iTLB-loads                #    1.103 M/sec                    (10.15%)
          1,63,935      iTLB-load-misses          #   37.81% of all iTLB cache hits   (15.24%)
   <not supported>      L1-dcache-prefetches                                        
         31,93,145      L1-dcache-prefetch-misses #    8.122 M/sec                    (19.59%)

       1.252572897 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 38, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 74.51% complete, ETA 00:00:36
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

339007498.000 ns/op
Iteration   1: 249529356.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        536.346200      task-clock (msec)         #    0.410 CPUs utilized          
               311      context-switches          #    0.580 K/sec                  
                43      cpu-migrations            #    0.080 K/sec                  
             3,985      page-faults               #    0.007 M/sec                  
    1,54,14,72,244      cycles                    #    2.874 GHz                      (23.64%)
      86,65,25,544      stalled-cycles-frontend   #   56.21% frontend cycles idle     (29.67%)
    1,77,75,75,309      instructions              #    1.15  insn per cycle         
                                                  #    0.49  stalled cycles per insn  (38.01%)
      31,21,31,050      branches                  #  581.958 M/sec                    (40.68%)
         88,37,800      branch-misses             #    2.83% of all branches          (42.63%)
      58,31,71,731      L1-dcache-loads           # 1087.305 M/sec                    (25.63%)
       1,84,45,687      L1-dcache-load-misses     #    3.16% of all L1-dcache hits    (15.83%)
         71,85,531      LLC-loads                 #   13.397 M/sec                    (14.10%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         71,32,051      L1-icache-load-misses                                         (20.99%)
      60,43,89,984      dTLB-loads                # 1126.865 M/sec                    (16.64%)
         14,68,929      dTLB-load-misses          #    0.24% of all dTLB cache hits   (11.32%)
          8,26,001      iTLB-loads                #    1.540 M/sec                    (11.24%)
          2,17,027      iTLB-load-misses          #   26.27% of all iTLB cache hits   (16.35%)
   <not supported>      L1-dcache-prefetches                                        
         58,51,321      L1-dcache-prefetch-misses #   10.910 M/sec                    (21.57%)

       1.308202621 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 38, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 75.49% complete, ETA 00:00:35
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        368.779913      task-clock (msec)         #    0.298 CPUs utilized          
               202      context-switches          #    0.548 K/sec                  
                26      cpu-migrations            #    0.071 K/sec                  
               156      page-faults               #    0.423 K/sec                  
    1,04,27,20,083      cycles                    #    2.827 GHz                      (26.15%)
      66,65,34,668      stalled-cycles-frontend   #   63.92% frontend cycles idle     (31.56%)
      91,07,17,306      instructions              #    0.87  insn per cycle         
                                                  #    0.73  stalled cycles per insn  (42.01%)
      17,59,08,083      branches                  #  477.000 M/sec                    (44.31%)
         63,41,833      branch-misses             #    3.61% of all branches          (45.84%)
      25,28,39,862      L1-dcache-loads           #  685.612 M/sec                    (17.89%)
       1,47,60,514      L1-dcache-load-misses     #    5.84% of all L1-dcache hits    (15.65%)
         68,42,031      LLC-loads                 #   18.553 M/sec                    (11.69%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         14,66,337      L1-icache-load-misses                                         (16.97%)
      32,13,34,814      dTLB-loads                #  871.346 M/sec                    (10.83%)
         21,53,938      dTLB-load-misses          #    0.67% of all dTLB cache hits   (12.98%)
          3,54,632      iTLB-loads                #    0.962 M/sec                    (10.81%)
          1,32,966      iTLB-load-misses          #   37.49% of all iTLB cache hits   (16.41%)
   <not supported>      L1-dcache-prefetches                                        
         31,11,646      L1-dcache-prefetch-misses #    8.438 M/sec                    (20.75%)

       1.237504629 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 39, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 76.47% complete, ETA 00:00:33
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 358424616.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        652.712087      task-clock (msec)         #    0.477 CPUs utilized          
               349      context-switches          #    0.535 K/sec                  
                31      cpu-migrations            #    0.047 K/sec                  
             4,884      page-faults               #    0.007 M/sec                  
    1,85,29,93,692      cycles                    #    2.839 GHz                      (26.83%)
    1,03,47,26,038      stalled-cycles-frontend   #   55.84% frontend cycles idle     (29.87%)
    2,16,55,55,846      instructions              #    1.17  insn per cycle         
                                                  #    0.48  stalled cycles per insn  (38.47%)
      38,49,76,563      branches                  #  589.811 M/sec                    (39.66%)
       1,05,62,566      branch-misses             #    2.74% of all branches          (40.88%)
      69,81,56,267      L1-dcache-loads           # 1069.624 M/sec                    (17.71%)
       2,35,01,292      L1-dcache-load-misses     #    3.37% of all L1-dcache hits    (16.16%)
         88,43,542      LLC-loads                 #   13.549 M/sec                    (13.17%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         45,75,306      L1-icache-load-misses                                         (19.69%)
      78,91,50,379      dTLB-loads                # 1209.033 M/sec                    (18.21%)
         14,06,633      dTLB-load-misses          #    0.18% of all dTLB cache hits   (13.43%)
          9,64,180      iTLB-loads                #    1.477 M/sec                    (12.93%)
          3,80,453      iTLB-load-misses          #   39.46% of all iTLB cache hits   (18.94%)
   <not supported>      L1-dcache-prefetches                                        
         57,80,448      L1-dcache-prefetch-misses #    8.856 M/sec                    (24.45%)

       1.369091432 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 39, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 77.45% complete, ETA 00:00:32
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

190404652.000 ns/op
Iteration   1: 349035295.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        280.578853      task-clock (msec)         #    0.234 CPUs utilized          
               215      context-switches          #    0.766 K/sec                  
                40      cpu-migrations            #    0.143 K/sec                  
               154      page-faults               #    0.549 K/sec                  
      74,74,16,010      cycles                    #    2.664 GHz                      (22.74%)
      42,53,88,511      stalled-cycles-frontend   #   56.91% frontend cycles idle     (29.27%)
      72,17,05,070      instructions              #    0.97  insn per cycle         
                                                  #    0.59  stalled cycles per insn  (39.76%)
      13,21,03,559      branches                  #  470.825 M/sec                    (44.33%)
         49,40,806      branch-misses             #    3.74% of all branches          (48.55%)
      26,73,00,432      L1-dcache-loads           #  952.675 M/sec                    (23.02%)
       1,16,11,588      L1-dcache-load-misses     #    4.34% of all L1-dcache hits    (13.26%)
         56,75,834      LLC-loads                 #   20.229 M/sec                    (12.91%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         15,16,977      L1-icache-load-misses                                         (17.21%)
      24,52,56,142      dTLB-loads                #  874.108 M/sec                    (15.02%)
         14,33,781      dTLB-load-misses          #    0.58% of all dTLB cache hits   (12.29%)
          3,83,405      iTLB-loads                #    1.366 M/sec                    (10.84%)
          1,54,782      iTLB-load-misses          #   40.37% of all iTLB cache hits   (15.11%)
   <not supported>      L1-dcache-prefetches                                        
         28,66,787      L1-dcache-prefetch-misses #   10.217 M/sec                    (19.19%)

       1.199602347 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 40, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 78.43% complete, ETA 00:00:31
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        583.132250      task-clock (msec)         #    0.431 CPUs utilized          
               315      context-switches          #    0.540 K/sec                  
                63      cpu-migrations            #    0.108 K/sec                  
             3,308      page-faults               #    0.006 M/sec                  
    1,66,51,33,656      cycles                    #    2.855 GHz                      (26.37%)
      96,82,83,520      stalled-cycles-frontend   #   58.15% frontend cycles idle     (31.41%)
    1,89,36,42,392      instructions              #    1.14  insn per cycle         
                                                  #    0.51  stalled cycles per insn  (39.29%)
      33,97,12,610      branches                  #  582.565 M/sec                    (39.91%)
         94,07,908      branch-misses             #    2.77% of all branches          (41.35%)
      65,14,38,085      L1-dcache-loads           # 1117.136 M/sec                    (25.80%)
       2,00,37,285      L1-dcache-load-misses     #    3.08% of all L1-dcache hits    (20.29%)
         83,03,073      LLC-loads                 #   14.239 M/sec                    (18.06%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         62,58,266      L1-icache-load-misses                                         (22.71%)
      58,10,35,678      dTLB-loads                #  996.405 M/sec                    (16.09%)
         15,22,352      dTLB-load-misses          #    0.26% of all dTLB cache hits   (12.38%)
          7,68,237      iTLB-loads                #    1.317 M/sec                    (11.64%)
          1,17,734      iTLB-load-misses          #   15.33% of all iTLB cache hits   (15.75%)
   <not supported>      L1-dcache-prefetches                                        
         59,82,119      L1-dcache-prefetch-misses #   10.259 M/sec                    (20.55%)

       1.353367118 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 40, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 79.41% complete, ETA 00:00:29
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 237512381.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        251.270755      task-clock (msec)         #    0.215 CPUs utilized          
               209      context-switches          #    0.832 K/sec                  
                65      cpu-migrations            #    0.259 K/sec                  
               142      page-faults               #    0.565 K/sec                  
      71,02,55,366      cycles                    #    2.827 GHz                      (23.23%)
      45,67,36,699      stalled-cycles-frontend   #   64.31% frontend cycles idle     (33.30%)
      54,48,58,902      instructions              #    0.77  insn per cycle         
                                                  #    0.84  stalled cycles per insn  (43.51%)
      10,04,05,715      branches                  #  399.592 M/sec                    (47.60%)
         59,06,371      branch-misses             #    5.88% of all branches          (52.18%)
      21,79,29,696      L1-dcache-loads           #  867.310 M/sec                    (24.31%)
       1,13,73,735      L1-dcache-load-misses     #    5.22% of all L1-dcache hits    (13.31%)
         64,35,085      LLC-loads                 #   25.610 M/sec                    (10.73%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
          6,97,498      L1-icache-load-misses                                         (15.50%)
      23,08,50,783      dTLB-loads                #  918.733 M/sec                    (11.13%)
         15,47,589      dTLB-load-misses          #    0.67% of all dTLB cache hits   (9.55%)
          2,78,389      iTLB-loads                #    1.108 M/sec                    (9.55%)
            14,507      iTLB-load-misses          #    5.21% of all iTLB cache hits   (14.31%)
   <not supported>      L1-dcache-prefetches                                        
         33,76,267      L1-dcache-prefetch-misses #   13.437 M/sec                    (18.44%)

       1.168549271 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 41, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 80.39% complete, ETA 00:00:28
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

408258605.000 ns/op
Iteration   1: 230521154.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        660.060231      task-clock (msec)         #    0.472 CPUs utilized          
               342      context-switches          #    0.518 K/sec                  
                54      cpu-migrations            #    0.082 K/sec                  
             4,616      page-faults               #    0.007 M/sec                  
    1,94,05,06,256      cycles                    #    2.940 GHz                      (28.18%)
    1,22,62,96,265      stalled-cycles-frontend   #   63.19% frontend cycles idle     (32.05%)
    1,97,01,20,592      instructions              #    1.02  insn per cycle         
                                                  #    0.62  stalled cycles per insn  (40.03%)
      35,38,06,843      branches                  #  536.022 M/sec                    (40.48%)
         95,63,677      branch-misses             #    2.70% of all branches          (42.70%)
      54,07,32,328      L1-dcache-loads           #  819.217 M/sec                    (19.03%)
       2,23,89,613      L1-dcache-load-misses     #    4.14% of all L1-dcache hits    (16.33%)
         81,83,877      LLC-loads                 #   12.399 M/sec                    (13.25%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         90,77,263      L1-icache-load-misses                                         (18.22%)
      57,39,22,762      dTLB-loads                #  869.501 M/sec                    (13.25%)
         18,37,941      dTLB-load-misses          #    0.32% of all dTLB cache hits   (14.44%)
         11,25,350      iTLB-loads                #    1.705 M/sec                    (12.71%)
          2,04,898      iTLB-load-misses          #   18.21% of all iTLB cache hits   (17.56%)
   <not supported>      L1-dcache-prefetches                                        
         64,56,034      L1-dcache-prefetch-misses #    9.781 M/sec                    (21.79%)

       1.397976639 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 41, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 81.37% complete, ETA 00:00:26
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        256.490840      task-clock (msec)         #    0.218 CPUs utilized          
               203      context-switches          #    0.791 K/sec                  
                22      cpu-migrations            #    0.086 K/sec                  
               150      page-faults               #    0.585 K/sec                  
      70,50,87,676      cycles                    #    2.749 GHz                      (23.61%)
      38,35,21,450      stalled-cycles-frontend   #   54.39% frontend cycles idle     (30.74%)
      75,89,50,479      instructions              #    1.08  insn per cycle         
                                                  #    0.51  stalled cycles per insn  (42.28%)
      13,81,32,095      branches                  #  538.546 M/sec                    (48.10%)
         48,66,377      branch-misses             #    3.52% of all branches          (51.48%)
      24,78,59,629      L1-dcache-loads           #  966.349 M/sec                    (21.84%)
       1,02,25,986      L1-dcache-load-misses     #    4.13% of all L1-dcache hits    (14.06%)
         48,11,436      LLC-loads                 #   18.759 M/sec                    (13.10%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         33,76,369      L1-icache-load-misses                                         (19.25%)
      23,54,78,903      dTLB-loads                #  918.079 M/sec                    (13.25%)
         13,11,773      dTLB-load-misses          #    0.56% of all dTLB cache hits   (9.35%)
          2,81,937      iTLB-loads                #    1.099 M/sec                    (8.37%)
          1,07,005      iTLB-load-misses          #   37.95% of all iTLB cache hits   (13.03%)
   <not supported>      L1-dcache-prefetches                                        
         26,03,660      L1-dcache-prefetch-misses #   10.151 M/sec                    (17.71%)

       1.177281880 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 42, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 82.35% complete, ETA 00:00:25
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 326676665.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        577.055766      task-clock (msec)         #    0.426 CPUs utilized          
               333      context-switches          #    0.577 K/sec                  
                58      cpu-migrations            #    0.101 K/sec                  
             2,974      page-faults               #    0.005 M/sec                  
    1,60,27,72,049      cycles                    #    2.777 GHz                      (26.17%)
      86,21,74,892      stalled-cycles-frontend   #   53.79% frontend cycles idle     (29.56%)
    1,93,06,07,011      instructions              #    1.20  insn per cycle         
                                                  #    0.45  stalled cycles per insn  (40.07%)
      34,20,26,875      branches                  #  592.710 M/sec                    (44.05%)
         94,84,898      branch-misses             #    2.77% of all branches          (46.23%)
      64,55,60,634      L1-dcache-loads           # 1118.714 M/sec                    (17.33%)
       2,00,07,248      L1-dcache-load-misses     #    3.10% of all L1-dcache hits    (16.92%)
         85,40,599      LLC-loads                 #   14.800 M/sec                    (12.64%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         75,95,633      L1-icache-load-misses                                         (18.24%)
      67,05,52,344      dTLB-loads                # 1162.023 M/sec                    (15.75%)
         14,22,113      dTLB-load-misses          #    0.21% of all dTLB cache hits   (11.64%)
          6,85,939      iTLB-loads                #    1.189 M/sec                    (11.31%)
          1,25,478      iTLB-load-misses          #   18.29% of all iTLB cache hits   (16.85%)
   <not supported>      L1-dcache-prefetches                                        
         65,67,055      L1-dcache-prefetch-misses #   11.380 M/sec                    (22.25%)

       1.355674744 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 42, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 83.33% complete, ETA 00:00:24
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

250644586.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        336.218124      task-clock (msec)         #    0.275 CPUs utilized          
               247      context-switches          #    0.735 K/sec                  
                27      cpu-migrations            #    0.080 K/sec                  
               150      page-faults               #    0.446 K/sec                  
      97,30,53,855      cycles                    #    2.894 GHz                      (23.00%)
      60,14,56,526      stalled-cycles-frontend   #   61.81% frontend cycles idle     (30.02%)
      88,85,55,487      instructions              #    0.91  insn per cycle         
                                                  #    0.68  stalled cycles per insn  (40.76%)
      15,23,04,576      branches                  #  452.993 M/sec                    (43.82%)
         61,02,556      branch-misses             #    4.01% of all branches          (47.19%)
      24,71,76,357      L1-dcache-loads           #  735.167 M/sec                    (17.88%)
       1,27,06,862      L1-dcache-load-misses     #    5.14% of all L1-dcache hits    (15.14%)
         66,78,165      LLC-loads                 #   19.863 M/sec                    (12.10%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         27,89,009      L1-icache-load-misses                                         (18.34%)
      27,35,05,540      dTLB-loads                #  813.476 M/sec                    (13.95%)
         18,50,189      dTLB-load-misses          #    0.68% of all dTLB cache hits   (13.82%)
          3,14,318      iTLB-loads                #    0.935 M/sec                    (10.54%)
            18,759      iTLB-load-misses          #    5.97% of all iTLB cache hits   (14.77%)
   <not supported>      L1-dcache-prefetches                                        
         37,96,698      L1-dcache-prefetch-misses #   11.292 M/sec                    (18.33%)

       1.221534890 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 43, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 84.31% complete, ETA 00:00:22
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

381888934.000 ns/op
Iteration   1: 219643852.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        611.543567      task-clock (msec)         #    0.443 CPUs utilized          
               291      context-switches          #    0.476 K/sec                  
                51      cpu-migrations            #    0.083 K/sec                  
             4,050      page-faults               #    0.007 M/sec                  
    1,74,28,94,625      cycles                    #    2.850 GHz                      (28.02%)
    1,04,04,65,333      stalled-cycles-frontend   #   59.70% frontend cycles idle     (31.53%)
    1,92,49,18,433      instructions              #    1.10  insn per cycle         
                                                  #    0.54  stalled cycles per insn  (39.84%)
      35,04,31,463      branches                  #  573.028 M/sec                    (39.45%)
         94,67,845      branch-misses             #    2.70% of all branches          (40.69%)
      66,93,72,820      L1-dcache-loads           # 1094.563 M/sec                    (21.65%)
       1,99,57,578      L1-dcache-load-misses     #    2.98% of all L1-dcache hits    (13.40%)
         86,89,355      LLC-loads                 #   14.209 M/sec                    (14.90%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         60,14,096      L1-icache-load-misses                                         (19.42%)
      62,61,80,046      dTLB-loads                # 1023.934 M/sec                    (13.28%)
         14,41,932      dTLB-load-misses          #    0.23% of all dTLB cache hits   (11.72%)
          7,74,607      iTLB-loads                #    1.267 M/sec                    (12.10%)
          1,65,616      iTLB-load-misses          #   21.38% of all iTLB cache hits   (18.38%)
   <not supported>      L1-dcache-prefetches                                        
         55,64,036      L1-dcache-prefetch-misses #    9.098 M/sec                    (23.62%)

       1.380317522 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 43, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 85.29% complete, ETA 00:00:21
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        212.509722      task-clock (msec)         #    0.183 CPUs utilized          
               201      context-switches          #    0.946 K/sec                  
                36      cpu-migrations            #    0.169 K/sec                  
               148      page-faults               #    0.696 K/sec                  
      61,02,72,840      cycles                    #    2.872 GHz                      (23.46%)
      34,26,96,961      stalled-cycles-frontend   #   56.15% frontend cycles idle     (30.84%)
      56,67,32,675      instructions              #    0.93  insn per cycle         
                                                  #    0.60  stalled cycles per insn  (41.61%)
      10,44,80,790      branches                  #  491.652 M/sec                    (45.58%)
         43,42,521      branch-misses             #    4.16% of all branches          (49.17%)
      19,86,31,142      L1-dcache-loads           #  934.692 M/sec                    (20.50%)
         88,45,113      L1-dcache-load-misses     #    4.45% of all L1-dcache hits    (14.36%)
         44,83,033      LLC-loads                 #   21.096 M/sec                    (11.93%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         21,96,573      L1-icache-load-misses                                         (17.57%)
      20,82,85,556      dTLB-loads                #  980.122 M/sec                    (13.16%)
         12,96,541      dTLB-load-misses          #    0.62% of all dTLB cache hits   (11.28%)
          2,27,977      iTLB-loads                #    1.073 M/sec                    (11.28%)
            24,817      iTLB-load-misses          #   10.89% of all iTLB cache hits   (15.35%)
   <not supported>      L1-dcache-prefetches                                        
         26,15,166      L1-dcache-prefetch-misses #   12.306 M/sec                    (19.12%)

       1.163381934 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 44, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 86.27% complete, ETA 00:00:19
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 399475803.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        675.475893      task-clock (msec)         #    0.477 CPUs utilized          
               358      context-switches          #    0.530 K/sec                  
                43      cpu-migrations            #    0.064 K/sec                  
             4,510      page-faults               #    0.007 M/sec                  
    1,96,92,14,175      cycles                    #    2.915 GHz                      (25.78%)
    1,18,71,99,240      stalled-cycles-frontend   #   60.29% frontend cycles idle     (29.39%)
    2,19,16,65,414      instructions              #    1.11  insn per cycle         
                                                  #    0.54  stalled cycles per insn  (37.47%)
      38,94,09,080      branches                  #  576.496 M/sec                    (39.36%)
       1,04,93,479      branch-misses             #    2.69% of all branches          (39.59%)
      65,43,05,333      L1-dcache-loads           #  968.658 M/sec                    (18.75%)
       2,16,24,617      L1-dcache-load-misses     #    3.30% of all L1-dcache hits    (15.27%)
         87,27,249      LLC-loads                 #   12.920 M/sec                    (15.18%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         95,51,955      L1-icache-load-misses                                         (20.94%)
      62,53,57,047      dTLB-loads                #  925.802 M/sec                    (16.99%)
         15,10,212      dTLB-load-misses          #    0.24% of all dTLB cache hits   (13.75%)
          8,92,546      iTLB-loads                #    1.321 M/sec                    (12.93%)
          2,02,297      iTLB-load-misses          #   22.67% of all iTLB cache hits   (17.75%)
   <not supported>      L1-dcache-prefetches                                        
         59,35,068      L1-dcache-prefetch-misses #    8.786 M/sec                    (23.38%)

       1.416884737 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 44, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 87.25% complete, ETA 00:00:18
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

223379996.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        225.248674      task-clock (msec)         #    0.195 CPUs utilized          
               175      context-switches          #    0.777 K/sec                  
                31      cpu-migrations            #    0.138 K/sec                  
               152      page-faults               #    0.675 K/sec                  
      63,08,93,823      cycles                    #    2.801 GHz                      (26.73%)
      35,59,54,791      stalled-cycles-frontend   #   56.42% frontend cycles idle     (35.32%)
      65,43,35,908      instructions              #    1.04  insn per cycle         
                                                  #    0.54  stalled cycles per insn  (46.40%)
      11,71,28,954      branches                  #  519.998 M/sec                    (52.21%)
         43,64,023      branch-misses             #    3.73% of all branches          (53.55%)
      23,81,61,556      L1-dcache-loads           # 1057.327 M/sec                    (18.37%)
         90,26,802      L1-dcache-load-misses     #    3.79% of all L1-dcache hits    (10.63%)
         47,12,178      LLC-loads                 #   20.920 M/sec                    (10.63%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
          9,81,583      L1-icache-load-misses                                         (15.96%)
      23,45,00,799      dTLB-loads                # 1041.075 M/sec                    (11.63%)
         17,59,606      dTLB-load-misses          #    0.75% of all dTLB cache hits   (8.51%)
          2,96,693      iTLB-loads                #    1.317 M/sec                    (9.26%)
            50,221      iTLB-load-misses          #   16.93% of all iTLB cache hits   (14.59%)
   <not supported>      L1-dcache-prefetches                                        
         29,35,421      L1-dcache-prefetch-misses #   13.032 M/sec                    (19.92%)

       1.156318754 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 45, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 88.24% complete, ETA 00:00:17
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

388659375.000 ns/op
Iteration   1: 246097419.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        718.714508      task-clock (msec)         #    0.504 CPUs utilized          
               274      context-switches          #    0.381 K/sec                  
                51      cpu-migrations            #    0.071 K/sec                  
             5,030      page-faults               #    0.007 M/sec                  
    2,04,69,90,142      cycles                    #    2.848 GHz                      (24.75%)
    1,09,04,12,214      stalled-cycles-frontend   #   53.27% frontend cycles idle     (28.02%)
    2,52,38,36,526      instructions              #    1.23  insn per cycle         
                                                  #    0.43  stalled cycles per insn  (36.73%)
      44,27,76,433      branches                  #  616.067 M/sec                    (38.82%)
       1,21,13,804      branch-misses             #    2.74% of all branches          (40.53%)
      84,75,43,221      L1-dcache-loads           # 1179.249 M/sec                    (25.44%)
       2,54,46,159      L1-dcache-load-misses     #    3.00% of all L1-dcache hits    (14.33%)
         98,94,821      LLC-loads                 #   13.767 M/sec                    (14.74%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         86,85,051      L1-icache-load-misses                                         (21.19%)
      76,24,95,639      dTLB-loads                # 1060.916 M/sec                    (16.25%)
         19,44,335      dTLB-load-misses          #    0.25% of all dTLB cache hits   (15.27%)
          8,63,186      iTLB-loads                #    1.201 M/sec                    (12.23%)
          1,48,656      iTLB-load-misses          #   17.22% of all iTLB cache hits   (18.02%)
   <not supported>      L1-dcache-prefetches                                        
         76,45,802      L1-dcache-prefetch-misses #   10.638 M/sec                    (23.84%)

       1.426971206 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 45, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 89.22% complete, ETA 00:00:15
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        317.678547      task-clock (msec)         #    0.263 CPUs utilized          
               226      context-switches          #    0.711 K/sec                  
                48      cpu-migrations            #    0.151 K/sec                  
               160      page-faults               #    0.504 K/sec                  
      90,23,73,932      cycles                    #    2.841 GHz                      (25.66%)
      51,34,19,974      stalled-cycles-frontend   #   56.90% frontend cycles idle     (32.21%)
      90,28,13,825      instructions              #    1.00  insn per cycle         
                                                  #    0.57  stalled cycles per insn  (41.13%)
      16,05,24,840      branches                  #  505.306 M/sec                    (43.33%)
         62,25,673      branch-misses             #    3.88% of all branches          (48.47%)
      25,99,45,239      L1-dcache-loads           #  818.265 M/sec                    (21.88%)
       1,22,66,908      L1-dcache-load-misses     #    4.72% of all L1-dcache hits    (14.15%)
         64,37,985      LLC-loads                 #   20.266 M/sec                    (13.81%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         20,50,191      L1-icache-load-misses                                         (17.57%)
      35,87,85,749      dTLB-loads                # 1129.399 M/sec                    (13.42%)
         21,04,125      dTLB-load-misses          #    0.59% of all dTLB cache hits   (10.15%)
          2,48,177      iTLB-loads                #    0.781 M/sec                    (10.06%)
            12,162      iTLB-load-misses          #    4.90% of all iTLB cache hits   (15.09%)
   <not supported>      L1-dcache-prefetches                                        
         37,03,646      L1-dcache-prefetch-misses #   11.658 M/sec                    (20.12%)

       1.209732484 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 46, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 90.20% complete, ETA 00:00:14
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

370326234.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        667.033256      task-clock (msec)         #    0.473 CPUs utilized          
               327      context-switches          #    0.490 K/sec                  
                43      cpu-migrations            #    0.064 K/sec                  
             5,488      page-faults               #    0.008 M/sec                  
    1,91,32,34,948      cycles                    #    2.868 GHz                      (26.33%)
    1,05,07,85,424      stalled-cycles-frontend   #   54.92% frontend cycles idle     (29.84%)
    2,28,81,41,757      instructions              #    1.20  insn per cycle         
                                                  #    0.46  stalled cycles per insn  (38.19%)
      39,75,47,978      branches                  #  595.994 M/sec                    (41.54%)
       1,14,95,592      branch-misses             #    2.89% of all branches          (44.48%)
      73,90,45,865      L1-dcache-loads           # 1107.960 M/sec                    (22.52%)
       2,29,67,651      L1-dcache-load-misses     #    3.11% of all L1-dcache hits    (17.22%)
         82,96,237      LLC-loads                 #   12.438 M/sec                    (14.00%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         92,74,709      L1-icache-load-misses                                         (19.05%)
      75,45,08,736      dTLB-loads                # 1131.141 M/sec                    (15.95%)
         17,94,424      dTLB-load-misses          #    0.24% of all dTLB cache hits   (15.13%)
          9,72,242      iTLB-loads                #    1.458 M/sec                    (11.20%)
          1,72,791      iTLB-load-misses          #   17.77% of all iTLB cache hits   (16.60%)
   <not supported>      L1-dcache-prefetches                                        
         72,59,738      L1-dcache-prefetch-misses #   10.884 M/sec                    (22.01%)

       1.409846453 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 46, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 91.18% complete, ETA 00:00:12
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

234162690.000 ns/op
Iteration   1: 370042757.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        375.090353      task-clock (msec)         #    0.301 CPUs utilized          
               226      context-switches          #    0.603 K/sec                  
                31      cpu-migrations            #    0.083 K/sec                  
               157      page-faults               #    0.419 K/sec                  
    1,03,59,94,843      cycles                    #    2.762 GHz                      (26.40%)
      62,65,33,221      stalled-cycles-frontend   #   60.48% frontend cycles idle     (31.98%)
      97,24,04,800      instructions              #    0.94  insn per cycle         
                                                  #    0.64  stalled cycles per insn  (42.50%)
      17,88,10,634      branches                  #  476.713 M/sec                    (44.56%)
         65,67,404      branch-misses             #    3.67% of all branches          (46.72%)
      29,35,77,621      L1-dcache-loads           #  782.685 M/sec                    (17.82%)
       1,66,76,158      L1-dcache-load-misses     #    5.68% of all L1-dcache hits    (17.19%)
         79,41,821      LLC-loads                 #   21.173 M/sec                    (13.10%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         27,13,433      L1-icache-load-misses                                         (18.43%)
      32,21,91,310      dTLB-loads                #  858.970 M/sec                    (12.37%)
         20,05,284      dTLB-load-misses          #    0.62% of all dTLB cache hits   (11.71%)
          3,38,195      iTLB-loads                #    0.902 M/sec                    (10.64%)
          1,06,415      iTLB-load-misses          #   31.47% of all iTLB cache hits   (16.27%)
   <not supported>      L1-dcache-prefetches                                        
         35,42,282      L1-dcache-prefetch-misses #    9.444 M/sec                    (20.52%)

       1.244412949 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 47, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 92.16% complete, ETA 00:00:11
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        630.483348      task-clock (msec)         #    0.451 CPUs utilized          
               305      context-switches          #    0.484 K/sec                  
                44      cpu-migrations            #    0.070 K/sec                  
             4,457      page-faults               #    0.007 M/sec                  
    1,81,17,46,500      cycles                    #    2.874 GHz                      (25.83%)
      97,39,39,724      stalled-cycles-frontend   #   53.76% frontend cycles idle     (30.23%)
    2,13,06,96,924      instructions              #    1.18  insn per cycle         
                                                  #    0.46  stalled cycles per insn  (38.66%)
      38,01,68,240      branches                  #  602.979 M/sec                    (39.41%)
       1,01,86,465      branch-misses             #    2.68% of all branches          (41.43%)
      69,58,41,123      L1-dcache-loads           # 1103.663 M/sec                    (23.49%)
       2,17,13,717      L1-dcache-load-misses     #    3.12% of all L1-dcache hits    (14.68%)
         81,50,578      LLC-loads                 #   12.928 M/sec                    (13.93%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         63,73,943      L1-icache-load-misses                                         (19.84%)
      77,42,58,817      dTLB-loads                # 1228.040 M/sec                    (14.03%)
         15,80,581      dTLB-load-misses          #    0.20% of all dTLB cache hits   (14.23%)
          9,53,661      iTLB-loads                #    1.513 M/sec                    (12.74%)
          2,66,204      iTLB-load-misses          #   27.91% of all iTLB cache hits   (19.41%)
   <not supported>      L1-dcache-prefetches                                        
         63,86,362      L1-dcache-prefetch-misses #   10.129 M/sec                    (24.43%)

       1.398042865 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 47, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 93.14% complete, ETA 00:00:09
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 289555235.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        452.999409      task-clock (msec)         #    0.360 CPUs utilized          
               212      context-switches          #    0.468 K/sec                  
                34      cpu-migrations            #    0.075 K/sec                  
               508      page-faults               #    0.001 M/sec                  
    1,29,05,96,962      cycles                    #    2.849 GHz                      (24.17%)
      78,47,40,456      stalled-cycles-frontend   #   60.80% frontend cycles idle     (28.95%)
    1,17,21,16,024      instructions              #    0.91  insn per cycle         
                                                  #    0.67  stalled cycles per insn  (38.52%)
      21,46,30,758      branches                  #  473.799 M/sec                    (41.76%)
         76,87,298      branch-misses             #    3.58% of all branches          (44.81%)
      39,40,95,890      L1-dcache-loads           #  869.970 M/sec                    (22.91%)
       1,58,53,902      L1-dcache-load-misses     #    4.02% of all L1-dcache hits    (16.51%)
         77,73,531      LLC-loads                 #   17.160 M/sec                    (12.34%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         14,67,427      L1-icache-load-misses                                         (18.51%)
      47,96,76,339      dTLB-loads                # 1058.890 M/sec                    (16.54%)
         16,28,214      dTLB-load-misses          #    0.34% of all dTLB cache hits   (15.43%)
          3,14,646      iTLB-loads                #    0.695 M/sec                    (11.24%)
          1,31,952      iTLB-load-misses          #   41.94% of all iTLB cache hits   (16.52%)
   <not supported>      L1-dcache-prefetches                                        
         42,90,816      L1-dcache-prefetch-misses #    9.472 M/sec                    (21.65%)

       1.256781959 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 48, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 94.12% complete, ETA 00:00:08
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

356952209.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        695.826201      task-clock (msec)         #    0.492 CPUs utilized          
               351      context-switches          #    0.504 K/sec                  
                61      cpu-migrations            #    0.088 K/sec                  
             2,974      page-faults               #    0.004 M/sec                  
    1,99,05,58,556      cycles                    #    2.861 GHz                      (29.07%)
    1,14,00,92,777      stalled-cycles-frontend   #   57.28% frontend cycles idle     (32.43%)
    2,28,12,55,213      instructions              #    1.15  insn per cycle         
                                                  #    0.50  stalled cycles per insn  (40.64%)
      41,01,31,530      branches                  #  589.417 M/sec                    (41.47%)
       1,17,70,753      branch-misses             #    2.87% of all branches          (41.24%)
      79,47,24,933      L1-dcache-loads           # 1142.131 M/sec                    (23.45%)
       2,50,24,110      L1-dcache-load-misses     #    3.15% of all L1-dcache hits    (14.70%)
         85,93,333      LLC-loads                 #   12.350 M/sec                    (12.65%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         59,70,509      L1-icache-load-misses                                         (17.91%)
      84,93,48,440      dTLB-loads                # 1220.633 M/sec                    (15.62%)
         15,00,977      dTLB-load-misses          #    0.18% of all dTLB cache hits   (11.56%)
          9,78,234      iTLB-loads                #    1.406 M/sec                    (11.83%)
          2,63,795      iTLB-load-misses          #   26.97% of all iTLB cache hits   (18.62%)
   <not supported>      L1-dcache-prefetches                                        
         69,55,883      L1-dcache-prefetch-misses #    9.997 M/sec                    (25.04%)

       1.413689060 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 48, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 95.10% complete, ETA 00:00:07
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

288730101.000 ns/op
Iteration   1: 427237740.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        631.685951      task-clock (msec)         #    0.464 CPUs utilized          
               332      context-switches          #    0.526 K/sec                  
                51      cpu-migrations            #    0.081 K/sec                  
             3,055      page-faults               #    0.005 M/sec                  
    1,83,51,74,928      cycles                    #    2.905 GHz                      (22.87%)
    1,17,58,04,582      stalled-cycles-frontend   #   64.07% frontend cycles idle     (27.43%)
    1,72,74,75,403      instructions              #    0.94  insn per cycle         
                                                  #    0.68  stalled cycles per insn  (37.07%)
      31,17,66,816      branches                  #  493.547 M/sec                    (42.26%)
         89,05,413      branch-misses             #    2.86% of all branches          (46.53%)
      50,20,48,960      L1-dcache-loads           #  794.776 M/sec                    (22.60%)
       2,43,18,754      L1-dcache-load-misses     #    4.84% of all L1-dcache hits    (22.25%)
         89,75,886      LLC-loads                 #   14.209 M/sec                    (16.67%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         71,48,217      L1-icache-load-misses                                         (21.05%)
      53,78,31,663      dTLB-loads                #  851.423 M/sec                    (16.78%)
         36,01,855      dTLB-load-misses          #    0.67% of all dTLB cache hits   (15.78%)
          7,57,204      iTLB-loads                #    1.199 M/sec                    (10.13%)
          2,37,390      iTLB-load-misses          #   31.35% of all iTLB cache hits   (13.93%)
   <not supported>      L1-dcache-prefetches                                        
         49,60,132      L1-dcache-prefetch-misses #    7.852 M/sec                    (18.99%)

       1.360394321 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 49, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 96.08% complete, ETA 00:00:05
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        864.259201      task-clock (msec)         #    0.577 CPUs utilized          
               392      context-switches          #    0.454 K/sec                  
                61      cpu-migrations            #    0.071 K/sec                  
             3,959      page-faults               #    0.005 M/sec                  
    2,55,64,36,598      cycles                    #    2.958 GHz                      (26.38%)
    1,63,31,25,797      stalled-cycles-frontend   #   63.88% frontend cycles idle     (30.70%)
    2,52,54,22,267      instructions              #    0.99  insn per cycle         
                                                  #    0.65  stalled cycles per insn  (39.74%)
      45,54,47,236      branches                  #  526.980 M/sec                    (40.26%)
       1,25,00,476      branch-misses             #    2.74% of all branches          (40.92%)
      78,20,49,218      L1-dcache-loads           #  904.878 M/sec                    (20.23%)
       3,13,60,399      L1-dcache-load-misses     #    4.01% of all L1-dcache hits    (21.08%)
       1,19,48,438      LLC-loads                 #   13.825 M/sec                    (15.60%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
       1,31,03,330      L1-icache-load-misses                                         (19.43%)
      83,33,40,624      dTLB-loads                #  964.225 M/sec                    (18.40%)
         32,57,806      dTLB-load-misses          #    0.39% of all dTLB cache hits   (16.94%)
         15,39,545      iTLB-loads                #    1.781 M/sec                    (13.22%)
          4,80,231      iTLB-load-misses          #   31.19% of all iTLB cache hits   (17.51%)
   <not supported>      L1-dcache-prefetches                                        
         76,96,556      L1-dcache-prefetch-misses #    8.905 M/sec                    (23.08%)

       1.497453672 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 49, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 97.06% complete, ETA 00:00:04
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 231013167.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        253.563400      task-clock (msec)         #    0.212 CPUs utilized          
               218      context-switches          #    0.860 K/sec                  
                47      cpu-migrations            #    0.185 K/sec                  
               141      page-faults               #    0.556 K/sec                  
      74,44,63,617      cycles                    #    2.936 GHz                      (23.30%)
      42,34,80,365      stalled-cycles-frontend   #   56.88% frontend cycles idle     (27.92%)
      77,04,45,429      instructions              #    1.03  insn per cycle         
                                                  #    0.55  stalled cycles per insn  (38.70%)
      13,90,96,314      branches                  #  548.566 M/sec                    (43.60%)
         51,42,941      branch-misses             #    3.70% of all branches          (45.16%)
      28,89,28,755      L1-dcache-loads           # 1139.473 M/sec                    (19.59%)
       1,01,69,285      L1-dcache-load-misses     #    3.52% of all L1-dcache hits    (12.60%)
         50,17,317      LLC-loads                 #   19.787 M/sec                    (12.61%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         17,12,468      L1-icache-load-misses                                         (18.15%)
      27,43,04,139      dTLB-loads                # 1081.797 M/sec                    (15.51%)
         15,70,354      dTLB-load-misses          #    0.57% of all dTLB cache hits   (14.43%)
          4,48,959      iTLB-loads                #    1.771 M/sec                    (13.17%)
          1,69,682      iTLB-load-misses          #   37.79% of all iTLB cache hits   (17.91%)
   <not supported>      L1-dcache-prefetches                                        
         30,61,443      L1-dcache-prefetch-misses #   12.074 M/sec                    (23.25%)

       1.196377732 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 50, mapType = ART, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 98.04% complete, ETA 00:00:02
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

Iteration   1: 430374043.000 ns/op
Iteration   1: 
> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        621.805487      task-clock (msec)         #    0.447 CPUs utilized          
               244      context-switches          #    0.392 K/sec                  
                40      cpu-migrations            #    0.064 K/sec                  
             2,393      page-faults               #    0.004 M/sec                  
    1,78,13,39,275      cycles                    #    2.865 GHz                      (26.60%)
      92,89,92,419      stalled-cycles-frontend   #   52.15% frontend cycles idle     (29.92%)
    2,21,74,53,861      instructions              #    1.24  insn per cycle         
                                                  #    0.42  stalled cycles per insn  (39.13%)
      37,41,84,618      branches                  #  601.771 M/sec                    (41.61%)
         93,13,778      branch-misses             #    2.49% of all branches          (42.58%)
      68,00,09,644      L1-dcache-loads           # 1093.605 M/sec                    (17.36%)
       2,17,27,872      L1-dcache-load-misses     #    3.20% of all L1-dcache hits    (16.06%)
         78,94,356      LLC-loads                 #   12.696 M/sec                    (12.94%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
         35,56,655      L1-icache-load-misses                                         (19.97%)
      79,04,97,286      dTLB-loads                # 1271.294 M/sec                    (17.95%)
         12,53,735      dTLB-load-misses          #    0.16% of all dTLB cache hits   (12.84%)
          8,78,177      iTLB-loads                #    1.412 M/sec                    (12.81%)
          1,46,158      iTLB-load-misses          #   16.64% of all iTLB cache hits   (17.96%)
   <not supported>      L1-dcache-prefetches                                        
         71,40,911      L1-dcache-prefetch-misses #   11.484 M/sec                    (23.11%)

       1.390961500 seconds time elapsed



# JMH version: 1.23
# VM version: JDK 12.0.2, Java HotSpot(TM) 64-Bit Server VM, 12.0.2+10
# VM invoker: /usr/lib/jvm/java-12-oracle/bin/java
# VM options: <none>
# Warmup: <none>
# Measurement: 1 iterations, single-shot each
# Timeout: 10 min per iteration
# Threads: 1 thread
# Benchmark mode: Single shot invocation time
# Benchmark: com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert
# Parameters: (limit = 50, mapType = TREE_MAP, workloadFile = e_uniform_100000_randint_txn.dat)

# Run progress: 99.02% complete, ETA 00:00:01
# Fork: 1 of 1
# Preparing profilers: LinuxPerfProfiler 
# Profilers consume stderr from target VM, use -v EXTRA to copy to console

249839014.000 ns/op

> Task :jmh
# Processing profiler results: LinuxPerfProfiler 


Secondary result "com.github.rohansuri.art.ycsb.Long.E.rangeScanAndInsert:·perf":
Perf stats:
--------------------------------------------------

        266.506674      task-clock (msec)         #    0.223 CPUs utilized          
               220      context-switches          #    0.825 K/sec                  
                36      cpu-migrations            #    0.135 K/sec                  
               151      page-faults               #    0.567 K/sec                  
      72,35,21,158      cycles                    #    2.715 GHz                      (24.52%)
      42,70,86,685      stalled-cycles-frontend   #   59.03% frontend cycles idle     (31.31%)
      71,46,05,086      instructions              #    0.99  insn per cycle         
                                                  #    0.60  stalled cycles per insn  (41.64%)
      13,09,47,151      branches                  #  491.347 M/sec                    (46.36%)
         47,06,735      branch-misses             #    3.59% of all branches          (50.06%)
      25,52,51,925      L1-dcache-loads           #  957.769 M/sec                    (20.38%)
       1,23,11,953      L1-dcache-load-misses     #    4.82% of all L1-dcache hits    (12.28%)
         58,93,541      LLC-loads                 #   22.114 M/sec                    (11.98%)
   <not supported>      LLC-load-misses                                             
   <not supported>      L1-icache-loads                                             
          4,46,596      L1-icache-load-misses                                         (17.98%)
      31,58,63,713      dTLB-loads                # 1185.200 M/sec                    (14.24%)
         12,46,509      dTLB-load-misses          #    0.39% of all dTLB cache hits   (11.24%)
          3,18,217      iTLB-loads                #    1.194 M/sec                    (11.15%)
          1,35,552      iTLB-load-misses          #   42.60% of all iTLB cache hits   (15.69%)
   <not supported>      L1-dcache-prefetches                                        
         28,37,527      L1-dcache-prefetch-misses #   10.647 M/sec                    (20.05%)

       1.197296031 seconds time elapsed



# Run complete. Total time: 00:02:26

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                        (limit)  (mapType)                    (workloadFile)  Mode  Cnt          Score   Error  Units
Long.E.rangeScanAndInsert              0        ART  e_uniform_100000_randint_txn.dat    ss        81143154.000          ns/op
Long.E.rangeScanAndInsert:·cpi         0        ART  e_uniform_100000_randint_txn.dat    ss               1.229            CPI
Long.E.rangeScanAndInsert:·perf        0        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert              0   TREE_MAP  e_uniform_100000_randint_txn.dat    ss        72056700.000          ns/op
Long.E.rangeScanAndInsert:·cpi         0   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.438            CPI
Long.E.rangeScanAndInsert:·perf        0   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert              1        ART  e_uniform_100000_randint_txn.dat    ss       108583358.000          ns/op
Long.E.rangeScanAndInsert:·cpi         1        ART  e_uniform_100000_randint_txn.dat    ss               1.148            CPI
Long.E.rangeScanAndInsert:·perf        1        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert              1   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       114971400.000          ns/op
Long.E.rangeScanAndInsert:·cpi         1   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.054            CPI
Long.E.rangeScanAndInsert:·perf        1   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert              2        ART  e_uniform_100000_randint_txn.dat    ss       164751434.000          ns/op
Long.E.rangeScanAndInsert:·cpi         2        ART  e_uniform_100000_randint_txn.dat    ss               1.336            CPI
Long.E.rangeScanAndInsert:·perf        2        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert              2   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       113228235.000          ns/op
Long.E.rangeScanAndInsert:·cpi         2   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.549            CPI
Long.E.rangeScanAndInsert:·perf        2   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert              3        ART  e_uniform_100000_randint_txn.dat    ss       133361637.000          ns/op
Long.E.rangeScanAndInsert:·cpi         3        ART  e_uniform_100000_randint_txn.dat    ss               1.160            CPI
Long.E.rangeScanAndInsert:·perf        3        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert              3   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       120632460.000          ns/op
Long.E.rangeScanAndInsert:·cpi         3   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.323            CPI
Long.E.rangeScanAndInsert:·perf        3   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert              4        ART  e_uniform_100000_randint_txn.dat    ss       150159810.000          ns/op
Long.E.rangeScanAndInsert:·cpi         4        ART  e_uniform_100000_randint_txn.dat    ss               1.009            CPI
Long.E.rangeScanAndInsert:·perf        4        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert              4   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       179386614.000          ns/op
Long.E.rangeScanAndInsert:·cpi         4   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.614            CPI
Long.E.rangeScanAndInsert:·perf        4   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert              5        ART  e_uniform_100000_randint_txn.dat    ss       142337751.000          ns/op
Long.E.rangeScanAndInsert:·cpi         5        ART  e_uniform_100000_randint_txn.dat    ss               0.941            CPI
Long.E.rangeScanAndInsert:·perf        5        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert              5   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       128286859.000          ns/op
Long.E.rangeScanAndInsert:·cpi         5   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.406            CPI
Long.E.rangeScanAndInsert:·perf        5   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert              6        ART  e_uniform_100000_randint_txn.dat    ss       186419311.000          ns/op
Long.E.rangeScanAndInsert:·cpi         6        ART  e_uniform_100000_randint_txn.dat    ss               0.986            CPI
Long.E.rangeScanAndInsert:·perf        6        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert              6   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       139258777.000          ns/op
Long.E.rangeScanAndInsert:·cpi         6   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.421            CPI
Long.E.rangeScanAndInsert:·perf        6   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert              7        ART  e_uniform_100000_randint_txn.dat    ss       172340872.000          ns/op
Long.E.rangeScanAndInsert:·cpi         7        ART  e_uniform_100000_randint_txn.dat    ss               1.056            CPI
Long.E.rangeScanAndInsert:·perf        7        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert              7   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       145861894.000          ns/op
Long.E.rangeScanAndInsert:·cpi         7   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.388            CPI
Long.E.rangeScanAndInsert:·perf        7   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert              8        ART  e_uniform_100000_randint_txn.dat    ss       166041156.000          ns/op
Long.E.rangeScanAndInsert:·cpi         8        ART  e_uniform_100000_randint_txn.dat    ss               1.078            CPI
Long.E.rangeScanAndInsert:·perf        8        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert              8   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       148868488.000          ns/op
Long.E.rangeScanAndInsert:·cpi         8   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.625            CPI
Long.E.rangeScanAndInsert:·perf        8   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert              9        ART  e_uniform_100000_randint_txn.dat    ss       180817549.000          ns/op
Long.E.rangeScanAndInsert:·cpi         9        ART  e_uniform_100000_randint_txn.dat    ss               1.090            CPI
Long.E.rangeScanAndInsert:·perf        9        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert              9   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       136087512.000          ns/op
Long.E.rangeScanAndInsert:·cpi         9   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.159            CPI
Long.E.rangeScanAndInsert:·perf        9   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             10        ART  e_uniform_100000_randint_txn.dat    ss       219674937.000          ns/op
Long.E.rangeScanAndInsert:·cpi        10        ART  e_uniform_100000_randint_txn.dat    ss               1.258            CPI
Long.E.rangeScanAndInsert:·perf       10        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             10   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       145887609.000          ns/op
Long.E.rangeScanAndInsert:·cpi        10   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.451            CPI
Long.E.rangeScanAndInsert:·perf       10   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             11        ART  e_uniform_100000_randint_txn.dat    ss       209181170.000          ns/op
Long.E.rangeScanAndInsert:·cpi        11        ART  e_uniform_100000_randint_txn.dat    ss               0.987            CPI
Long.E.rangeScanAndInsert:·perf       11        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             11   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       132141524.000          ns/op
Long.E.rangeScanAndInsert:·cpi        11   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.135            CPI
Long.E.rangeScanAndInsert:·perf       11   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             12        ART  e_uniform_100000_randint_txn.dat    ss       298487955.000          ns/op
Long.E.rangeScanAndInsert:·cpi        12        ART  e_uniform_100000_randint_txn.dat    ss               1.284            CPI
Long.E.rangeScanAndInsert:·perf       12        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             12   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       129342478.000          ns/op
Long.E.rangeScanAndInsert:·cpi        12   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.200            CPI
Long.E.rangeScanAndInsert:·perf       12   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             13        ART  e_uniform_100000_randint_txn.dat    ss       230497115.000          ns/op
Long.E.rangeScanAndInsert:·cpi        13        ART  e_uniform_100000_randint_txn.dat    ss               1.111            CPI
Long.E.rangeScanAndInsert:·perf       13        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             13   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       161465707.000          ns/op
Long.E.rangeScanAndInsert:·cpi        13   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.136            CPI
Long.E.rangeScanAndInsert:·perf       13   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             14        ART  e_uniform_100000_randint_txn.dat    ss       267161958.000          ns/op
Long.E.rangeScanAndInsert:·cpi        14        ART  e_uniform_100000_randint_txn.dat    ss               1.282            CPI
Long.E.rangeScanAndInsert:·perf       14        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             14   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       166493234.000          ns/op
Long.E.rangeScanAndInsert:·cpi        14   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.368            CPI
Long.E.rangeScanAndInsert:·perf       14   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             15        ART  e_uniform_100000_randint_txn.dat    ss       203851783.000          ns/op
Long.E.rangeScanAndInsert:·cpi        15        ART  e_uniform_100000_randint_txn.dat    ss               1.036            CPI
Long.E.rangeScanAndInsert:·perf       15        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             15   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       149737661.000          ns/op
Long.E.rangeScanAndInsert:·cpi        15   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               0.950            CPI
Long.E.rangeScanAndInsert:·perf       15   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             16        ART  e_uniform_100000_randint_txn.dat    ss       205804970.000          ns/op
Long.E.rangeScanAndInsert:·cpi        16        ART  e_uniform_100000_randint_txn.dat    ss               1.034            CPI
Long.E.rangeScanAndInsert:·perf       16        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             16   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       154166200.000          ns/op
Long.E.rangeScanAndInsert:·cpi        16   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.056            CPI
Long.E.rangeScanAndInsert:·perf       16   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             17        ART  e_uniform_100000_randint_txn.dat    ss       259597610.000          ns/op
Long.E.rangeScanAndInsert:·cpi        17        ART  e_uniform_100000_randint_txn.dat    ss               1.065            CPI
Long.E.rangeScanAndInsert:·perf       17        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             17   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       152036645.000          ns/op
Long.E.rangeScanAndInsert:·cpi        17   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.077            CPI
Long.E.rangeScanAndInsert:·perf       17   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             18        ART  e_uniform_100000_randint_txn.dat    ss       254117603.000          ns/op
Long.E.rangeScanAndInsert:·cpi        18        ART  e_uniform_100000_randint_txn.dat    ss               1.018            CPI
Long.E.rangeScanAndInsert:·perf       18        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             18   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       151084258.000          ns/op
Long.E.rangeScanAndInsert:·cpi        18   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.243            CPI
Long.E.rangeScanAndInsert:·perf       18   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             19        ART  e_uniform_100000_randint_txn.dat    ss       309876352.000          ns/op
Long.E.rangeScanAndInsert:·cpi        19        ART  e_uniform_100000_randint_txn.dat    ss               0.934            CPI
Long.E.rangeScanAndInsert:·perf       19        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             19   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       161749013.000          ns/op
Long.E.rangeScanAndInsert:·cpi        19   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               0.961            CPI
Long.E.rangeScanAndInsert:·perf       19   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             20        ART  e_uniform_100000_randint_txn.dat    ss       243088953.000          ns/op
Long.E.rangeScanAndInsert:·cpi        20        ART  e_uniform_100000_randint_txn.dat    ss               0.982            CPI
Long.E.rangeScanAndInsert:·perf       20        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             20   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       205178496.000          ns/op
Long.E.rangeScanAndInsert:·cpi        20   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.301            CPI
Long.E.rangeScanAndInsert:·perf       20   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             21        ART  e_uniform_100000_randint_txn.dat    ss       305763162.000          ns/op
Long.E.rangeScanAndInsert:·cpi        21        ART  e_uniform_100000_randint_txn.dat    ss               1.146            CPI
Long.E.rangeScanAndInsert:·perf       21        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             21   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       158847873.000          ns/op
Long.E.rangeScanAndInsert:·cpi        21   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.232            CPI
Long.E.rangeScanAndInsert:·perf       21   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             22        ART  e_uniform_100000_randint_txn.dat    ss       267223254.000          ns/op
Long.E.rangeScanAndInsert:·cpi        22        ART  e_uniform_100000_randint_txn.dat    ss               0.914            CPI
Long.E.rangeScanAndInsert:·perf       22        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             22   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       183332419.000          ns/op
Long.E.rangeScanAndInsert:·cpi        22   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.043            CPI
Long.E.rangeScanAndInsert:·perf       22   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             23        ART  e_uniform_100000_randint_txn.dat    ss       250649079.000          ns/op
Long.E.rangeScanAndInsert:·cpi        23        ART  e_uniform_100000_randint_txn.dat    ss               0.912            CPI
Long.E.rangeScanAndInsert:·perf       23        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             23   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       165138839.000          ns/op
Long.E.rangeScanAndInsert:·cpi        23   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               0.991            CPI
Long.E.rangeScanAndInsert:·perf       23   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             24        ART  e_uniform_100000_randint_txn.dat    ss       326638259.000          ns/op
Long.E.rangeScanAndInsert:·cpi        24        ART  e_uniform_100000_randint_txn.dat    ss               1.028            CPI
Long.E.rangeScanAndInsert:·perf       24        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             24   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       210402151.000          ns/op
Long.E.rangeScanAndInsert:·cpi        24   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               0.982            CPI
Long.E.rangeScanAndInsert:·perf       24   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             25        ART  e_uniform_100000_randint_txn.dat    ss       333850083.000          ns/op
Long.E.rangeScanAndInsert:·cpi        25        ART  e_uniform_100000_randint_txn.dat    ss               1.040            CPI
Long.E.rangeScanAndInsert:·perf       25        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             25   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       179141424.000          ns/op
Long.E.rangeScanAndInsert:·cpi        25   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.057            CPI
Long.E.rangeScanAndInsert:·perf       25   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             26        ART  e_uniform_100000_randint_txn.dat    ss       275196985.000          ns/op
Long.E.rangeScanAndInsert:·cpi        26        ART  e_uniform_100000_randint_txn.dat    ss               0.872            CPI
Long.E.rangeScanAndInsert:·perf       26        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             26   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       166512863.000          ns/op
Long.E.rangeScanAndInsert:·cpi        26   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.168            CPI
Long.E.rangeScanAndInsert:·perf       26   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             27        ART  e_uniform_100000_randint_txn.dat    ss       278942090.000          ns/op
Long.E.rangeScanAndInsert:·cpi        27        ART  e_uniform_100000_randint_txn.dat    ss               0.873            CPI
Long.E.rangeScanAndInsert:·perf       27        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             27   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       185001343.000          ns/op
Long.E.rangeScanAndInsert:·cpi        27   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.161            CPI
Long.E.rangeScanAndInsert:·perf       27   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             28        ART  e_uniform_100000_randint_txn.dat    ss       276245985.000          ns/op
Long.E.rangeScanAndInsert:·cpi        28        ART  e_uniform_100000_randint_txn.dat    ss               0.942            CPI
Long.E.rangeScanAndInsert:·perf       28        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             28   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       161734781.000          ns/op
Long.E.rangeScanAndInsert:·cpi        28   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.117            CPI
Long.E.rangeScanAndInsert:·perf       28   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             29        ART  e_uniform_100000_randint_txn.dat    ss       300986455.000          ns/op
Long.E.rangeScanAndInsert:·cpi        29        ART  e_uniform_100000_randint_txn.dat    ss               0.931            CPI
Long.E.rangeScanAndInsert:·perf       29        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             29   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       172337565.000          ns/op
Long.E.rangeScanAndInsert:·cpi        29   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.099            CPI
Long.E.rangeScanAndInsert:·perf       29   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             30        ART  e_uniform_100000_randint_txn.dat    ss       335451817.000          ns/op
Long.E.rangeScanAndInsert:·cpi        30        ART  e_uniform_100000_randint_txn.dat    ss               1.054            CPI
Long.E.rangeScanAndInsert:·perf       30        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             30   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       214559890.000          ns/op
Long.E.rangeScanAndInsert:·cpi        30   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               0.903            CPI
Long.E.rangeScanAndInsert:·perf       30   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             31        ART  e_uniform_100000_randint_txn.dat    ss       299332920.000          ns/op
Long.E.rangeScanAndInsert:·cpi        31        ART  e_uniform_100000_randint_txn.dat    ss               0.826            CPI
Long.E.rangeScanAndInsert:·perf       31        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             31   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       175533535.000          ns/op
Long.E.rangeScanAndInsert:·cpi        31   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.093            CPI
Long.E.rangeScanAndInsert:·perf       31   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             32        ART  e_uniform_100000_randint_txn.dat    ss       379147643.000          ns/op
Long.E.rangeScanAndInsert:·cpi        32        ART  e_uniform_100000_randint_txn.dat    ss               1.008            CPI
Long.E.rangeScanAndInsert:·perf       32        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             32   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       204448313.000          ns/op
Long.E.rangeScanAndInsert:·cpi        32   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.010            CPI
Long.E.rangeScanAndInsert:·perf       32   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             33        ART  e_uniform_100000_randint_txn.dat    ss       310285210.000          ns/op
Long.E.rangeScanAndInsert:·cpi        33        ART  e_uniform_100000_randint_txn.dat    ss               0.887            CPI
Long.E.rangeScanAndInsert:·perf       33        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             33   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       213741431.000          ns/op
Long.E.rangeScanAndInsert:·cpi        33   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.103            CPI
Long.E.rangeScanAndInsert:·perf       33   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             34        ART  e_uniform_100000_randint_txn.dat    ss       284392026.000          ns/op
Long.E.rangeScanAndInsert:·cpi        34        ART  e_uniform_100000_randint_txn.dat    ss               0.810            CPI
Long.E.rangeScanAndInsert:·perf       34        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             34   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       198516790.000          ns/op
Long.E.rangeScanAndInsert:·cpi        34   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               0.960            CPI
Long.E.rangeScanAndInsert:·perf       34   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             35        ART  e_uniform_100000_randint_txn.dat    ss       332936484.000          ns/op
Long.E.rangeScanAndInsert:·cpi        35        ART  e_uniform_100000_randint_txn.dat    ss               0.839            CPI
Long.E.rangeScanAndInsert:·perf       35        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             35   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       186526312.000          ns/op
Long.E.rangeScanAndInsert:·cpi        35   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.006            CPI
Long.E.rangeScanAndInsert:·perf       35   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             36        ART  e_uniform_100000_randint_txn.dat    ss       336402099.000          ns/op
Long.E.rangeScanAndInsert:·cpi        36        ART  e_uniform_100000_randint_txn.dat    ss               0.931            CPI
Long.E.rangeScanAndInsert:·perf       36        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             36   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       215891550.000          ns/op
Long.E.rangeScanAndInsert:·cpi        36   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.074            CPI
Long.E.rangeScanAndInsert:·perf       36   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             37        ART  e_uniform_100000_randint_txn.dat    ss       314215995.000          ns/op
Long.E.rangeScanAndInsert:·cpi        37        ART  e_uniform_100000_randint_txn.dat    ss               0.878            CPI
Long.E.rangeScanAndInsert:·perf       37        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             37   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       239344173.000          ns/op
Long.E.rangeScanAndInsert:·cpi        37   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.248            CPI
Long.E.rangeScanAndInsert:·perf       37   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             38        ART  e_uniform_100000_randint_txn.dat    ss       339007498.000          ns/op
Long.E.rangeScanAndInsert:·cpi        38        ART  e_uniform_100000_randint_txn.dat    ss               0.867            CPI
Long.E.rangeScanAndInsert:·perf       38        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             38   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       249529356.000          ns/op
Long.E.rangeScanAndInsert:·cpi        38   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.145            CPI
Long.E.rangeScanAndInsert:·perf       38   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             39        ART  e_uniform_100000_randint_txn.dat    ss       358424616.000          ns/op
Long.E.rangeScanAndInsert:·cpi        39        ART  e_uniform_100000_randint_txn.dat    ss               0.856            CPI
Long.E.rangeScanAndInsert:·perf       39        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             39   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       190404652.000          ns/op
Long.E.rangeScanAndInsert:·cpi        39   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.036            CPI
Long.E.rangeScanAndInsert:·perf       39   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             40        ART  e_uniform_100000_randint_txn.dat    ss       349035295.000          ns/op
Long.E.rangeScanAndInsert:·cpi        40        ART  e_uniform_100000_randint_txn.dat    ss               0.879            CPI
Long.E.rangeScanAndInsert:·perf       40        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             40   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       237512381.000          ns/op
Long.E.rangeScanAndInsert:·cpi        40   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.304            CPI
Long.E.rangeScanAndInsert:·perf       40   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             41        ART  e_uniform_100000_randint_txn.dat    ss       408258605.000          ns/op
Long.E.rangeScanAndInsert:·cpi        41        ART  e_uniform_100000_randint_txn.dat    ss               0.985            CPI
Long.E.rangeScanAndInsert:·perf       41        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             41   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       230521154.000          ns/op
Long.E.rangeScanAndInsert:·cpi        41   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               0.929            CPI
Long.E.rangeScanAndInsert:·perf       41   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             42        ART  e_uniform_100000_randint_txn.dat    ss       326676665.000          ns/op
Long.E.rangeScanAndInsert:·cpi        42        ART  e_uniform_100000_randint_txn.dat    ss               0.830            CPI
Long.E.rangeScanAndInsert:·perf       42        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             42   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       250644586.000          ns/op
Long.E.rangeScanAndInsert:·cpi        42   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.095            CPI
Long.E.rangeScanAndInsert:·perf       42   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             43        ART  e_uniform_100000_randint_txn.dat    ss       381888934.000          ns/op
Long.E.rangeScanAndInsert:·cpi        43        ART  e_uniform_100000_randint_txn.dat    ss               0.905            CPI
Long.E.rangeScanAndInsert:·perf       43        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             43   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       219643852.000          ns/op
Long.E.rangeScanAndInsert:·cpi        43   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.077            CPI
Long.E.rangeScanAndInsert:·perf       43   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             44        ART  e_uniform_100000_randint_txn.dat    ss       399475803.000          ns/op
Long.E.rangeScanAndInsert:·cpi        44        ART  e_uniform_100000_randint_txn.dat    ss               0.899            CPI
Long.E.rangeScanAndInsert:·perf       44        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             44   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       223379996.000          ns/op
Long.E.rangeScanAndInsert:·cpi        44   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               0.964            CPI
Long.E.rangeScanAndInsert:·perf       44   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             45        ART  e_uniform_100000_randint_txn.dat    ss       388659375.000          ns/op
Long.E.rangeScanAndInsert:·cpi        45        ART  e_uniform_100000_randint_txn.dat    ss               0.811            CPI
Long.E.rangeScanAndInsert:·perf       45        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             45   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       246097419.000          ns/op
Long.E.rangeScanAndInsert:·cpi        45   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.000            CPI
Long.E.rangeScanAndInsert:·perf       45   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             46        ART  e_uniform_100000_randint_txn.dat    ss       370326234.000          ns/op
Long.E.rangeScanAndInsert:·cpi        46        ART  e_uniform_100000_randint_txn.dat    ss               0.836            CPI
Long.E.rangeScanAndInsert:·perf       46        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             46   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       234162690.000          ns/op
Long.E.rangeScanAndInsert:·cpi        46   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.065            CPI
Long.E.rangeScanAndInsert:·perf       46   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             47        ART  e_uniform_100000_randint_txn.dat    ss       370042757.000          ns/op
Long.E.rangeScanAndInsert:·cpi        47        ART  e_uniform_100000_randint_txn.dat    ss               0.850            CPI
Long.E.rangeScanAndInsert:·perf       47        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             47   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       289555235.000          ns/op
Long.E.rangeScanAndInsert:·cpi        47   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.101            CPI
Long.E.rangeScanAndInsert:·perf       47   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             48        ART  e_uniform_100000_randint_txn.dat    ss       356952209.000          ns/op
Long.E.rangeScanAndInsert:·cpi        48        ART  e_uniform_100000_randint_txn.dat    ss               0.873            CPI
Long.E.rangeScanAndInsert:·perf       48        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             48   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       288730101.000          ns/op
Long.E.rangeScanAndInsert:·cpi        48   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.062            CPI
Long.E.rangeScanAndInsert:·perf       48   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             49        ART  e_uniform_100000_randint_txn.dat    ss       427237740.000          ns/op
Long.E.rangeScanAndInsert:·cpi        49        ART  e_uniform_100000_randint_txn.dat    ss               1.012            CPI
Long.E.rangeScanAndInsert:·perf       49        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             49   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       231013167.000          ns/op
Long.E.rangeScanAndInsert:·cpi        49   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               0.966            CPI
Long.E.rangeScanAndInsert:·perf       49   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             50        ART  e_uniform_100000_randint_txn.dat    ss       430374043.000          ns/op
Long.E.rangeScanAndInsert:·cpi        50        ART  e_uniform_100000_randint_txn.dat    ss               0.803            CPI
Long.E.rangeScanAndInsert:·perf       50        ART  e_uniform_100000_randint_txn.dat    ss                 NaN            ---
Long.E.rangeScanAndInsert             50   TREE_MAP  e_uniform_100000_randint_txn.dat    ss       249839014.000          ns/op
Long.E.rangeScanAndInsert:·cpi        50   TREE_MAP  e_uniform_100000_randint_txn.dat    ss               1.012            CPI
Long.E.rangeScanAndInsert:·perf       50   TREE_MAP  e_uniform_100000_randint_txn.dat    ss                 NaN            ---

Benchmark result is saved to /home/rohansuri/adaptive-radix-tree/art/build/reports/jmh/results.txt

Deprecated Gradle features were used in this build, making it incompatible with Gradle 6.0.
Use '--warning-mode all' to show the individual deprecation warnings.
See https://docs.gradle.org/5.6.2/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 2m 47s
9 actionable tasks: 9 executed
