/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.9/userguide/java_library_plugin.html
 */

plugins {
	// Apply the java-library plugin to add support for Java Library
	id 'java-library'
	id "me.champeau.gradle.jmh" version "0.5.0-rc-1"
	id 'jacoco'
	id "maven-publish"
	id "com.jfrog.bintray" version "1.8.4"
}

bintray {
	user = 'rohansuri'
	key = 'api-key'
	pkg {
		repo = 'adaptive-radix-tree'
		name = 'adaptive-radix-tree'
		version {
			name = '1.0.0-beta'
		}
	}
	publications = ['MyPublication']
	configurations = ['archives']
}

tasks.register("sourcesJar", Jar) {
	from sourceSets.main.allJava
	classifier "sources"
}

tasks.register("javadocJar", Jar) {
	from javadoc
	classifier "javadoc"
}

publishing {
	publications {
		MyPublication(MavenPublication) {
			from components.java
			groupId 'com.github.rohansuri'
			artifactId 'adaptive-radix-tree'
			version '1.0.0-beta'
			artifact sourcesJar
			artifact javadocJar
		}
	}
}

jmh {

	include = ['com.github.rohansuri.art.ycsb.Long.E']
	// include = ['com.github.rohansuri.art.ycsb.Long.E', 'com.github.rohansuri.art.ycsb.Long.C']
	// include = ['com.github.rohansuri.art.ycsb.integer.Load']
	// include = ['com.github.rohansuri.art.Long.Insert']
	// include = ['ExtraSpaceSentinelLinearSearch', 'LinearVsBinarySearch.linear']
	fork = 1
	warmup = '1s'
	warmupIterations = 10
	// profilers = ['perf']
	// profilers = ['perf:events=task-clock,cycles,instructions,cache-references,cache-misses']
	// profilers = ['perfasm:events=L1-dcache-loads;hotThreshold=.05']
	// profilers = ['perfasm:events=L1-dcache-loads']
//	profilers = ['perf:events=MEM_UOPS_RETIRED.ALL_LOADS,' +
//						 'L1D.REPLACEMENT,' +
//						 'MEM_LOAD_UOPS_RETIRED.L1_HIT,' +
//						 'MEM_LOAD_UOPS_RETIRED.L2_HIT,' +
//						 'MEM_LOAD_UOPS_RETIRED.LLC_HIT,' +
//						 ' MEM_LOAD_UOPS_RETIRED.L1_MISS,' +
//						 ' MEM_LOAD_UOPS_RETIRED.L2_MISS,' +
//						 ' MEM_LOAD_UOPS_RETIRED.LLC_MISS, L2_RQSTS.PF_HIT, L2_RQSTS.PF_MISS, L2_RQSTS.ALL_PF']
	// profilers = ['perf:events=L1-dcache-loads']
	// profilers = ['perfasm:hotThreshold=.1']
	// profilers = ['dtraceasm:hotThreshold=.03']
	// jvmArgs = '-Xmx14g -Xms8g -XX:FreqInlineSize=0'
	// jvmArgs = '-XX:FreqInlineSize=0'
	timeOnIteration = '1s'
	iterations = 50
	benchmarkParameters = [:]
	// benchmarkParameters['distributionType'] = ['SPARSE']
	// benchmarkParameters['workloadFile'] = ['e_uniform_100000_randint_txn.dat']
	// benchmarkParameters['workloadFile'] = ["e_uniform_1000_randint_txn.dat", "e_uniform_5000_randint_txn.dat", "e_uniform_10000_randint_txn.dat", "e_uniform_50000_randint_txn.dat", "e_uniform_100000_randint_txn.dat"]
	benchmarkParameters['mapType'] = ['ART']
	// benchmarkParameters['mapType'] = ['ART', 'TREE_MAP']
	// benchmarkParameters['mapType'] = ['TREE_MAP']
	// benchmarkParameters['file'] = ['WORDS']
	// benchmarkParameters['size'] = ['1000', '10000', '100000', '1000000', '10000000']
	// resultFormat = 'JSON'
}

dependencies {

	// for research, comparing performance, etc
	testCompile group: 'org.apache.commons', name: 'commons-collections4', version: '4.3'
	testCompile group: 'org.apache.commons', name: 'commons-collections4', version: '4.3', classifier: 'tests'
	testCompile group: 'com.ibm.icu', name: 'icu4j', version: '64.2'
	testCompile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
	//testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-migrationsupport', version: '5.5.2'
	//testCompile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.5.2'

	// Use JUnit test framework
	// testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.5.2'
	testCompile group: 'org.mockito', name: 'mockito-core', version: '2.26.0'
	testCompile group: 'com.google.guava', name: 'guava', version: '28.1-jre'
	testCompile group: 'commons-io', name: 'commons-io', version: '2.6'
	// testCompile("org.junit.jupiter:junit-jupiter-engine:5.5.2")

	testImplementation("org.junit.jupiter:junit-jupiter:5.5.2")
	testImplementation("junit:junit:4.12")
	testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.5.2")
	testImplementation("org.junit.jupiter:junit-jupiter-api:5.5.2")


	jmh group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
	jmh group: 'org.apache.commons', name: 'commons-collections4', version: '4.3'
	jmh group: 'commons-io', name: 'commons-io', version: '2.6'

	jmh 'org.openjdk.jmh:jmh-core:1.23'
	jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.23'

	compile group: 'org.openjdk.jol', name: 'jol-core', version: '0.10'

}

// In this section you declare where to find the dependencies of your project
repositories {
	// Use jcenter for resolving your dependencies.
	// You can declare any Maven/Ivy/file repository here.
	mavenCentral()
}

tasks.withType(Test) {
	enableAssertions = true
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}
	// https://stackoverflow.com/a/36130467/3804127
	afterSuite { desc, result ->
		if (!desc.parent) { // will match the outermost suite
			def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
			def startItem = '|  ', endItem = '  |'
			def repeatLength = startItem.length() + output.length() + endItem.length()
			println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
		}
	}
}


// https://stackoverflow.com/questions/54493166/how-to-run-junit-5-and-junit-4-test-suites-in-gradle
task testJUnit4(type: Test) {
	useJUnit()
	filter {
		includeTestsMatching "com.github.rohansuri.art.acc.*"
	}
	maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
	println "maxParallelForks for task testJUnit4=" + maxParallelForks
}

task jacocoRootReport(type: JacocoReport) {
	executionData = project.fileTree(dir: '.', include: '**/build/jacoco/*.exec')
	additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
	sourceDirectories = files(sourceSets.main.allSource.srcDirs)
	classDirectories = files(sourceSets.main.output)

	reports {
		xml.enabled = true
		html.enabled = true
	}
}

test {
	maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
	println "maxParallelForks for task test=" + maxParallelForks
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}
	useJUnitPlatform {
		includeEngines "junit-jupiter"
	}
	//dependsOn testJUnit4
	exclude 'playground/**' // folder just includes some examples or playing around with APIs
}


check.dependsOn testJUnit4
